# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'CNN_image_test.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

from PyQt5.QtGui import QIcon
import pyttsx3
from PyQt5.Qt import QApplication, QWidget, QPushButton,QThread,QMutex
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.Qt import pyqtSignal
from PyQt5.QtCore import QUrl

from PyQt5.QtWidgets import QFileDialog
import numpy as np
import data
import model
import time
import joblib
import torch
import torch.nn.functional as F
import torch.nn as nn
import torch.optim as optim
from torch.autograd import Variable
import torchvision
from torchvision import datasets, models, transforms
import os
import scipy.misc as im
from sklearn.metrics import confusion_matrix
import matplotlib
from tqdm import trange,tqdm
from torch.optim import lr_scheduler

import matplotlib.pyplot as plt
plt.switch_backend('TKAgg')
from openpyxl import load_workbook
import matplotlib as mpl
device=torch.device('cuda:0' if torch.cuda.is_available() else 'cpu')
mpl.rcParams["font.sans-serif"] = ["SimHei"]
mpl.rcParams["axes.unicode_minus"] = False
import imageio

from PIL import Image
from skimage.transform import resize
class Ui_CNN_image_test(object):
    def setupUi(self, CNN_image_test):
        CNN_image_test.setObjectName("CNN_image_test")
        CNN_image_test.resize(1559, 559)
        self.label_2 = QtWidgets.QLabel(CNN_image_test)
        self.label_2.setGeometry(QtCore.QRect(30, 20, 221, 41))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(12)
        self.label_2.setFont(font)
        self.label_2.setObjectName("label_2")
        self.pushButton = QtWidgets.QPushButton(CNN_image_test)
        self.pushButton.setGeometry(QtCore.QRect(320, 230, 75, 23))
        self.pushButton.setObjectName("pushButton")
        self.training_show = QtWidgets.QLabel(CNN_image_test)
        self.training_show.setGeometry(QtCore.QRect(0, 280, 911, 281))
        self.training_show.setStyleSheet("background-color: rgb(127, 130, 136);\n"
"")
        self.training_show.setFrameShadow(QtWidgets.QFrame.Raised)
        self.training_show.setLineWidth(3)
        self.training_show.setText("")
        self.training_show.setScaledContents(False)
        self.training_show.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignTop)
        self.training_show.setObjectName("training_show")
        self.label_21 = QtWidgets.QLabel(CNN_image_test)
        self.label_21.setGeometry(QtCore.QRect(30, 130, 161, 41))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(12)
        self.label_21.setFont(font)
        self.label_21.setObjectName("label_21")
        self.label_image_show = QtWidgets.QLabel(CNN_image_test)
        self.label_image_show.setGeometry(QtCore.QRect(710, 30, 171, 171))
        self.label_image_show.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.label_image_show.setText("")
        self.label_image_show.setObjectName("label_image_show")
        self.label = QtWidgets.QLabel(CNN_image_test)
        self.label.setGeometry(QtCore.QRect(710, 220, 171, 20))
        self.label.setAlignment(QtCore.Qt.AlignCenter)
        self.label.setObjectName("label")
        self.label_image_show_2 = QtWidgets.QLabel(CNN_image_test)
        self.label_image_show_2.setGeometry(QtCore.QRect(940, 30, 591, 481))
        self.label_image_show_2.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.label_image_show_2.setText("")
        self.label_image_show_2.setObjectName("label_image_show_2")
        self.label_3 = QtWidgets.QLabel(CNN_image_test)
        self.label_3.setGeometry(QtCore.QRect(1170, 530, 141, 20))
        self.label_3.setAlignment(QtCore.Qt.AlignCenter)
        self.label_3.setObjectName("label_3")
        self.lineEdit_CNN_classification_imagetest_model_address = QtWidgets.QLineEdit(CNN_image_test)
        self.lineEdit_CNN_classification_imagetest_model_address.setGeometry(QtCore.QRect(90, 70, 531, 21))
        font = QtGui.QFont()
        font.setPointSize(9)
        self.lineEdit_CNN_classification_imagetest_model_address.setFont(font)
        self.lineEdit_CNN_classification_imagetest_model_address.setStyleSheet("background-color: rgb(243, 243, 243);")
        self.lineEdit_CNN_classification_imagetest_model_address.setAlignment(QtCore.Qt.AlignCenter)
        self.lineEdit_CNN_classification_imagetest_model_address.setObjectName("lineEdit_CNN_classification_imagetest_model_address")
        self.pushButton_CNN_classification_imagetest_model_address = QtWidgets.QPushButton(CNN_image_test)
        self.pushButton_CNN_classification_imagetest_model_address.setGeometry(QtCore.QRect(620, 70, 31, 21))
        self.pushButton_CNN_classification_imagetest_model_address.setStyleSheet("background-color: rgb(98, 98, 98);")
        self.pushButton_CNN_classification_imagetest_model_address.setObjectName("pushButton_CNN_classification_imagetest_model_address")
        self.lineEdit_CNN_classification_imagetest_image_address_2 = QtWidgets.QLineEdit(CNN_image_test)
        self.lineEdit_CNN_classification_imagetest_image_address_2.setGeometry(QtCore.QRect(90, 180, 531, 21))
        font = QtGui.QFont()
        font.setPointSize(9)
        self.lineEdit_CNN_classification_imagetest_image_address_2.setFont(font)
        self.lineEdit_CNN_classification_imagetest_image_address_2.setStyleSheet("background-color: rgb(243, 243, 243);")
        self.lineEdit_CNN_classification_imagetest_image_address_2.setAlignment(QtCore.Qt.AlignCenter)
        self.lineEdit_CNN_classification_imagetest_image_address_2.setObjectName("lineEdit_CNN_classification_imagetest_image_address_2")
        self.pushButton_CNN_classification_imagetest_image_address_2 = QtWidgets.QPushButton(CNN_image_test)
        self.pushButton_CNN_classification_imagetest_image_address_2.setGeometry(QtCore.QRect(620, 180, 31, 21))
        self.pushButton_CNN_classification_imagetest_image_address_2.setStyleSheet("background-color: rgb(98, 98, 98);")
        self.pushButton_CNN_classification_imagetest_image_address_2.setObjectName("pushButton_CNN_classification_imagetest_image_address_2")

        self.retranslateUi(CNN_image_test)
        QtCore.QMetaObject.connectSlotsByName(CNN_image_test)

    def retranslateUi(self, CNN_image_test):
        _translate = QtCore.QCoreApplication.translate
        CNN_image_test.setWindowTitle(_translate("CNN_image_test", "卷积神经网络模型测试"))
        CNN_image_test.setWindowIcon(QIcon("logo.ico"))
        self.label_2.setText(_translate("CNN_image_test", "模型地址:"))
        self.pushButton.setText(_translate("CNN_image_test", "测试"))
        self.label_21.setText(_translate("CNN_image_test", "图像地址："))
        self.label.setText(_translate("CNN_image_test", "选取图像展示"))
        self.label_3.setText(_translate("CNN_image_test", "置信度分布图"))
        self.lineEdit_CNN_classification_imagetest_model_address.setText(_translate("CNN_image_test", "pkl_save\\uc_resnet18.pkl"))
        self.pushButton_CNN_classification_imagetest_model_address.setText(_translate("CNN_image_test", "…"))
        self.lineEdit_CNN_classification_imagetest_image_address_2.setText(_translate("CNN_image_test", "Data\\UCMerced_LandUse\\val\\agricultural\\agricultural19.tif"))
        self.pushButton_CNN_classification_imagetest_image_address_2.setText(_translate("CNN_image_test", "…"))

    def caolianjie(self):
        self.pushButton_CNN_classification_imagetest_image_address_2.clicked.connect(self.choose_CNN_imagetest_image_dir)
        self.pushButton_CNN_classification_imagetest_model_address.clicked.connect(self.choose_CNN_imagetest_model_dir)
        self.pushButton.clicked.connect(self.clear_all)
        self.pushButton.clicked.connect(lambda :self.openimage(self.lineEdit_CNN_classification_imagetest_image_address_2.text()))
        self.pushButton.clicked.connect(
            lambda: self.CNN_image_test(self.lineEdit_CNN_classification_imagetest_image_address_2.text(),
                                        self.lineEdit_CNN_classification_imagetest_model_address.text(),

))
    def CNN_image_test(self, image_test_address, model_address):
        self.thread_image_test = Thread_CNN_image_test(image_test_address, model_address)
        self.thread_image_test.update_imagetest.connect(self.get_CNN_image_test_result)
        self.thread_image_test.start()
        self.thread_image_test.exec()

    def get_CNN_image_test_result(self, image_test_result):
        self.training_show.setText(image_test_result[1])
        self.training_show.repaint()

        engine = pyttsx3.init()
        engine.say('识别结果为')

        engine.say(image_test_result[4])
        engine.runAndWait()

        # self.openimage(image_test_result[0])
        bar_width = 0.8
        tick_label = image_test_result[3]
        x = np.arange(len(image_test_result[3]))
        y = image_test_result[2]
        plt.bar(x, y, bar_width, align="center", color="b", alpha=0.5)
        plt.xlabel("种类")
        plt.ylabel("分类置信度")
        plt.xticks(x, tick_label,rotation=90)
        plt.legend()
        plt.savefig('result_image/{}.jpg'.format(image_test_result[4]))
        plt.close('all')
        self.openimage_cc('result_image/{}.jpg'.format(image_test_result[4]))
    def openimage(self,imgName):
        imgName = imgName.replace('\\', '/')
        jpg = QtGui.QPixmap(imgName).scaled(self.label_image_show.width(), self.label_image_show.height())
        self.label_image_show.setPixmap(jpg)
        self.label_image_show.repaint()
    def openimage_cc(self,imgName):
        imgName = imgName.replace('\\', '/')
        jpg = QtGui.QPixmap(imgName)
        self.label_image_show_2.setPixmap(jpg)
        self.label_image_show_2.repaint()
    def choose_CNN_imagetest_image_dir(self):
        data_dir = QFileDialog.getOpenFileName(None, 'Choose data File', '')
        # data_dir = QUrl.fromLocalFile(data_dir[0])
        self.lineEdit_CNN_classification_imagetest_image_address_2.setText(data_dir[0])
        self.openimage(data_dir[0])

    def choose_CNN_imagetest_model_dir(self):
        model_dir = QFileDialog.getOpenFileName(None, 'Choose model File', '')
        # data_dir = QUrl.fromLocalFile(data_dir[0])
        self.lineEdit_CNN_classification_imagetest_model_address.setText(model_dir[0])
    def clear_all(self):
        self.training_show.setText('')
        self.label_image_show.setPixmap(QtGui.QPixmap(""))
        self.label_image_show.repaint()
        self.label_image_show_2.setPixmap(QtGui.QPixmap(""))
        self.label_image_show_2.repaint()
class Thread_CNN_image_test(QThread):
    update_imagetest = pyqtSignal(dict)

    def __init__(self, image_test_address, model_address, data_name="uc"):
        super().__init__()
        self.out = ['单张标准遥感影像CNN分类：', '\n', '图像路径：', image_test_address,'\n','参数设置： ']
        # if channel_num=='3':
        #     self.out.extend(['mean0,mean1,mean2:',mean0,',',mean1,',',mean2,' std0,std1,std2:',std0,',',std1,',',std2, '\n'])
        # elif channel_num=='1':
        #     self.out.extend(['mean0:',mean0,' std0',std0])
        self.image_test_address, self.model_address, self.data_name,self.channel_num, self.resize, self.centercrop, self.mean0, self.mean1, self.mean2, self.std0, self.std1, self.std2=\
            image_test_address.replace('\\', '/'), model_address.replace('\\', '/'), data_name,'3', 224, 224, float(0.485), float(0.456), float(0.406), float(0.229), float(0.224), float(0.225)
    def run(self):

        test_result = self.image_test()
        self.update_imagetest.emit(test_result)
    def image_test(self):
        img = Image.open(self.image_test_address)

        transform_valid = transforms.Compose([transforms.Resize((224, 224)),
                            transforms.ToTensor(),
                            transforms.Normalize((0.44979182, 0.48921227, 0.48212156),
                                                 (0.19673954, 0.20322968, 0.21901236))])

        img_ = transform_valid(img).unsqueeze(0).to(device)
        model = torch.load(self.model_address)
        model = model.to(device)

        result = model(img_)[0]
        print(result)
        result = F.softmax(result)

        # if 'test' in self.image_test_address:
        #     dataset = self.image_test_address.split('test')
        # elif 'train' in self.image_test_address:
        #         dataset = self.image_test_address.split('train')
        # elif 'val' in self.image_test_address:
        #         dataset = self.image_test_address.split('val')
        # # print(dataset)
        # dataset = dataset[0]+'train'
        # sub_dir = os.listdir(dataset)
        if self.data_name == "uc":
            sub_dir = ['农田', "飞机", '棒球场', "沙滩", '建筑物', '树丛', '密集居民区', "森林", "高速公路",
                       "高尔夫球场", "海港", '十字路口', '中等居民区', '可移动住宅', "立交桥", '停车场', "河流", "飞机跑道", "稀疏居民区", '储水厂', "网球场"]
        elif self.data_name == "mstar":
            sub_dir = ["2S1", "BMP2", "BRDM_2", "BTR60", "BTR70", "D7", "T62", "T72", "ZIL131", "ZSU_23_4"]
        print(self.data_name)
        print(sub_dir)
        self.out.extend(['\n', '识别结果为：', sub_dir[int(torch.max(result, 0).indices)], '\n', '分类置信度：'])
        pred = sub_dir[int(torch.max(result,0).indices)]
        for i in range(len(sub_dir)):
            self.out.extend([sub_dir[i], ':', float('%.2g' % result[i].cpu().detach().numpy()), ' '])
            if i == 4:
                self.out.extend('\n            ')
        out = [str(i) for i in self.out]
        out = ''.join(out)
        CNN_image_test_out_log = out.split('\n')
        write_excel_xlsx('log.xlsx', CNN_image_test_out_log)
        result = result.cpu().detach().numpy()
        return ({0:self.image_test_address,1:out,2:result,3:sub_dir,4:pred})
def write_excel_xlsx(path, value):
    index = len(value)
    # 打开excel
    xl = load_workbook(path)
    # 获取所有sheet页名字
    xl_sheet_names = xl.get_sheet_names()
    # 定位到相应sheet页,[0]为sheet页索引
    xl_sheet = xl.get_sheet_by_name(xl_sheet_names[0])
    # 获取行列数
    row = xl_sheet.max_row
    if row == 0:
        ge = -2
    else:
        ge = 2
    # sheet.title = sheet_name
    for i in range(0, index):
        xl_sheet.cell(row=i + ge +row, column=1, value=str(value[i]))
    xl.save(path)
    print("xlsx格式表格写入数据成功！")

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    train = QtWidgets.QDialog()
    ui = Ui_CNN_image_test()
    ui.setupUi(train)
    ui.caolianjie()
    train.show()
    sys.exit(app.exec_())