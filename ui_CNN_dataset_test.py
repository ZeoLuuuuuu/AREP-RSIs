# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'ui_CNN_dataset_test.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5.QtGui import QIcon
import pyttsx3
from PyQt5.Qt import QApplication, QWidget, QPushButton,QThread,QMutex
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.Qt import pyqtSignal
from PyQt5.QtCore import QUrl
import matplotlib.pyplot as plt
from PyQt5.QtWidgets import QFileDialog
import numpy as np
import data
import model
import time
import joblib
import torch
import torch.nn.functional as F
import torch.nn as nn
import torch.optim as optim
from torch.autograd import Variable
import torchvision
from torchvision import datasets, models, transforms
import os
import scipy.misc as im
from sklearn.metrics import confusion_matrix
import matplotlib
import matplotlib.pyplot as plt
plt.switch_backend('TKAgg')
from tqdm import trange,tqdm
from torch.optim import lr_scheduler

from openpyxl import load_workbook
import matplotlib as mpl
device=torch.device('cuda:0' if torch.cuda.is_available() else 'cpu')
mpl.rcParams["font.sans-serif"] = ["SimHei"]
mpl.rcParams["axes.unicode_minus"] = False

class Ui_CNN_dataset_test(object):
    def setupUi(self, CNN_dataset_test):
        CNN_dataset_test.setObjectName("CNN_dataset_test")
        CNN_dataset_test.resize(1590, 558)
        font = QtGui.QFont()
        font.setPointSize(10)
        CNN_dataset_test.setFont(font)
        self.label_2 = QtWidgets.QLabel(CNN_dataset_test)
        self.label_2.setGeometry(QtCore.QRect(30, 20, 221, 41))
        font = QtGui.QFont()
        font.setFamily("黑体")
        font.setPointSize(13)
        self.label_2.setFont(font)
        self.label_2.setObjectName("label_2")
        self.pushButton = QtWidgets.QPushButton(CNN_dataset_test)
        self.pushButton.setGeometry(QtCore.QRect(330, 290, 111, 31))
        font = QtGui.QFont()
        font.setFamily("黑体")
        font.setPointSize(14)
        self.pushButton.setFont(font)
        self.pushButton.setObjectName("pushButton")
        self.training_show = QtWidgets.QLabel(CNN_dataset_test)
        self.training_show.setGeometry(QtCore.QRect(0, 350, 941, 211))
        font = QtGui.QFont()
        font.setFamily("黑体")
        font.setPointSize(13)
        self.training_show.setFont(font)
        self.training_show.setStyleSheet("background-color: rgb(127, 130, 136);\n"
"")
        self.training_show.setFrameShadow(QtWidgets.QFrame.Raised)
        self.training_show.setLineWidth(3)
        self.training_show.setText("")
        self.training_show.setScaledContents(False)
        self.training_show.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignTop)
        self.training_show.setObjectName("training_show")
        self.label_21 = QtWidgets.QLabel(CNN_dataset_test)
        self.label_21.setGeometry(QtCore.QRect(30, 138, 221, 41))
        font = QtGui.QFont()
        font.setFamily("黑体")
        font.setPointSize(13)
        self.label_21.setFont(font)
        self.label_21.setObjectName("label_21")
        self.label_image_show = QtWidgets.QLabel(CNN_dataset_test)
        self.label_image_show.setGeometry(QtCore.QRect(700, 53, 201, 211))
        self.label_image_show.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.label_image_show.setText("")
        self.label_image_show.setObjectName("label_image_show")
        self.label = QtWidgets.QLabel(CNN_dataset_test)
        self.label.setGeometry(QtCore.QRect(715, 270, 171, 20))
        font = QtGui.QFont()
        font.setFamily("黑体")
        font.setPointSize(12)
        self.label.setFont(font)
        self.label.setAlignment(QtCore.Qt.AlignCenter)
        self.label.setObjectName("label")
        self.label_image_show_2 = QtWidgets.QLabel(CNN_dataset_test)
        self.label_image_show_2.setGeometry(QtCore.QRect(970, 30, 591, 481))
        self.label_image_show_2.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.label_image_show_2.setText("")
        self.label_image_show_2.setObjectName("label_image_show_2")
        self.label_3 = QtWidgets.QLabel(CNN_dataset_test)
        self.label_3.setGeometry(QtCore.QRect(1208, 520, 141, 20))
        font = QtGui.QFont()
        font.setFamily("黑体")
        font.setPointSize(13)
        self.label_3.setFont(font)
        self.label_3.setAlignment(QtCore.Qt.AlignCenter)
        self.label_3.setObjectName("label_3")
        self.lineEdit_CNN_classification_imagetest_model_address = QtWidgets.QLineEdit(CNN_dataset_test)
        self.lineEdit_CNN_classification_imagetest_model_address.setGeometry(QtCore.QRect(90, 90, 531, 21))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(11)
        self.lineEdit_CNN_classification_imagetest_model_address.setFont(font)
        self.lineEdit_CNN_classification_imagetest_model_address.setStyleSheet("background-color: rgb(243, 243, 243);")
        self.lineEdit_CNN_classification_imagetest_model_address.setAlignment(QtCore.Qt.AlignCenter)
        self.lineEdit_CNN_classification_imagetest_model_address.setObjectName("lineEdit_CNN_classification_imagetest_model_address")
        self.pushButton_CNN_classification_imagetest_model_address = QtWidgets.QPushButton(CNN_dataset_test)
        self.pushButton_CNN_classification_imagetest_model_address.setGeometry(QtCore.QRect(620, 90, 31, 21))
        self.pushButton_CNN_classification_imagetest_model_address.setStyleSheet("background-color: rgb(98, 98, 98);")
        self.pushButton_CNN_classification_imagetest_model_address.setObjectName("pushButton_CNN_classification_imagetest_model_address")
        self.radioButton_2 = QtWidgets.QRadioButton(CNN_dataset_test)
        self.radioButton_2.setGeometry(QtCore.QRect(280, 210, 111, 16))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(12)
        self.radioButton_2.setFont(font)
        self.radioButton_2.setObjectName("radioButton_2")
        self.radioButton_4 = QtWidgets.QRadioButton(CNN_dataset_test)
        self.radioButton_4.setGeometry(QtCore.QRect(70, 210, 89, 16))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(12)
        self.radioButton_4.setFont(font)
        self.radioButton_4.setChecked(True)
        self.radioButton_4.setObjectName("radioButton_4")
        self.radioButton_3 = QtWidgets.QRadioButton(CNN_dataset_test)
        self.radioButton_3.setGeometry(QtCore.QRect(160, 210, 89, 16))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(12)
        self.radioButton_3.setFont(font)
        self.radioButton_3.setObjectName("radioButton_3")
        self.radioButton = QtWidgets.QRadioButton(CNN_dataset_test)
        self.radioButton.setGeometry(QtCore.QRect(400, 210, 151, 16))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(12)
        self.radioButton.setFont(font)
        self.radioButton.setObjectName("radioButton")
        self.lineEdit_CNN_classification_imagetest_image_address = QtWidgets.QLineEdit(CNN_dataset_test)
        self.lineEdit_CNN_classification_imagetest_image_address.setGeometry(QtCore.QRect(280, 360, 351, 21))
        self.lineEdit_CNN_classification_imagetest_image_address.setObjectName("lineEdit_CNN_classification_imagetest_image_address")
        self.radioButton_5 = QtWidgets.QRadioButton(CNN_dataset_test)
        self.radioButton_5.setGeometry(QtCore.QRect(550, 210, 121, 16))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(12)
        self.radioButton_5.setFont(font)
        self.radioButton_5.setObjectName("radioButton_5")
        self.label_2.raise_()
        self.pushButton.raise_()
        self.label_21.raise_()
        self.label_image_show.raise_()
        self.label.raise_()
        self.label_image_show_2.raise_()
        self.label_3.raise_()
        self.lineEdit_CNN_classification_imagetest_model_address.raise_()
        self.pushButton_CNN_classification_imagetest_model_address.raise_()
        self.radioButton_2.raise_()
        self.radioButton_4.raise_()
        self.radioButton_3.raise_()
        self.radioButton.raise_()
        self.lineEdit_CNN_classification_imagetest_image_address.raise_()
        self.training_show.raise_()
        self.radioButton_5.raise_()

        self.retranslateUi(CNN_dataset_test)
        QtCore.QMetaObject.connectSlotsByName(CNN_dataset_test)
        self.dataset_name = 'uc'
        self.lineEdit_CNN_classification_imagetest_image_address.setText("Data\场景\\UCMerced_LandUse\\val")
    def retranslateUi(self, CNN_dataset_test):
        _translate = QtCore.QCoreApplication.translate
        CNN_dataset_test.setWindowTitle(_translate("CNN_dataset_test", "遥感影像单张测试"))
        self.label_2.setText(_translate("CNN_dataset_test", "模型地址:"))
        self.pushButton.setText(_translate("CNN_dataset_test", "测试"))
        self.label_21.setText(_translate("CNN_dataset_test", "遥感影像数据选择："))
        self.label.setText(_translate("CNN_dataset_test", "图像示例"))
        self.label_3.setText(_translate("CNN_dataset_test", "分类混淆矩阵"))
        self.lineEdit_CNN_classification_imagetest_model_address.setText(_translate("CNN_dataset_test", "pkl_save\\uc_resnet18.pkl"))
        self.pushButton_CNN_classification_imagetest_model_address.setText(_translate("CNN_dataset_test", "…"))
        self.radioButton_2.setText(_translate("CNN_dataset_test", "FGSC-23"))
        self.radioButton_4.setText(_translate("CNN_dataset_test", "UC"))
        self.radioButton_3.setText(_translate("CNN_dataset_test", "MSTAR"))
        self.radioButton.setText(_translate("CNN_dataset_test", "FUSAR-Ship"))
        self.radioButton_5.setText(_translate("CNN_dataset_test", "Sorted-Cars"))

    def caolianjie(self):
        # self.pushButton_CNN_classification_imagetest_image_address.clicked.connect(self.choose_CNN_dataset_test_data_dir)
        self.radioButton.toggled.connect(self.dataset_select_set_visible)
        self.radioButton_2.toggled.connect(self.dataset_select_set_visible)
        self.radioButton_3.toggled.connect(self.dataset_select_set_visible)
        self.radioButton_4.toggled.connect(self.dataset_select_set_visible)
        self.pushButton_CNN_classification_imagetest_model_address.clicked.connect(
            self.choose_CNN_dataset_test_model_dir)
        self.pushButton.clicked.connect(self.clear_all)
        self.pushButton.clicked.connect(
            lambda: self.openimage_example(self.lineEdit_CNN_classification_imagetest_image_address.text()))
        self.pushButton.clicked.connect(
            lambda: self.CNN_dataset_test(self.lineEdit_CNN_classification_imagetest_image_address.text(),
                                          self.lineEdit_CNN_classification_imagetest_model_address.text(),
                                          self.dataset_name))

    def dataset_select_set_visible(self):
        if self.radioButton.isChecked():
            self.dataset_name = 'fusarship'
            data_dir = "Data\目标\\FUSAR_Ship\\val"
            self.lineEdit_CNN_classification_imagetest_image_address.setText(data_dir)
            self.openimage_example(data_dir)
        elif self.radioButton_2.isChecked():
            self.dataset_name = 'fgsc'
            data_dir = "Data\目标\\FGSC-23\\val"
            self.lineEdit_CNN_classification_imagetest_image_address.setText(data_dir)
            self.openimage_example(data_dir)
        elif self.radioButton_3.isChecked():
            self.dataset_name = 'mstar'
            data_dir = "Data\目标\MSTAR-10\\val"
            self.lineEdit_CNN_classification_imagetest_image_address.setText(data_dir)
            self.openimage_example(data_dir)
        elif self.radioButton_4.isChecked():
            self.dataset_name = 'uc'
            data_dir = "Data\场景\\UCMerced_LandUse\对抗欺骗样本\\UC_PGD_Adv"
            self.lineEdit_CNN_classification_imagetest_image_address.setText(data_dir)
            self.openimage_example((data_dir))
        elif self.radioButton_5.isChecked():
            self.dataset_name = 'sortedcars'
            data_dir = "Data\目标\\Sorted_Cars\\val"
            self.lineEdit_CNN_classification_imagetest_image_address.setText(data_dir)
            self.openimage_example((data_dir))
    def CNN_dataset_test(self, dataset_test_address, model_address, dataset_name):
        self.thread_image_test = Thread_CNN_dataset_test(dataset_test_address, model_address, dataset_name)
        self.thread_image_test.update_datasettest.connect(self.get_CNN_dataset_test_result)
        self.thread_image_test.start()
        self.thread_image_test.exec()

    def get_CNN_dataset_test_result(self, test_result):
        self.training_show.setText(test_result[0])
        self.training_show.repaint()

        engine = pyttsx3.init()
        engine.say('分类正确率为')
        engine.say('百分之')
        engine.say(test_result[3])
        engine.runAndWait()

        test_cm = test_result[1]
        sub_dir = test_result[2]
        plt.imshow(test_cm, cmap=plt.cm.Reds)
        indices = range(len(test_cm))
        plt.xticks(indices, sub_dir, rotation=270)
        plt.yticks(indices, sub_dir)
        # plt.colorbar()

        plt.xlabel('预测标签')
        plt.ylabel('真实标签')
        plt.title('混淆矩阵')
        plt.rcParams['font.sans-serif'] = ['SimHei']
        plt.rcParams['axes.unicode_minus'] = False

        for first_index in range(len(test_cm)):  # 第几行
            for second_index in range(len(test_cm[first_index])):  # 第几列
                plt.text(first_index, second_index, test_cm[second_index][first_index], verticalalignment='center',
                         horizontalalignment='center')
        # plt.show()
        plt.savefig('result_image/CNN_cm.jpg')
        plt.close('all')
        self.openimage_cm('result_image/CNN_cm.jpg')

        # def choose_CNN_dataset_test_data_dir(self):
        #     data_dir = QFileDialog.getExistingDirectory(None, 'Choose data File', '')
        #     self.lineEdit_CNN_classification_imagetest_image_address.setText(data_dir)
        #     self.openimage_example(data_dir)

    def choose_CNN_dataset_test_model_dir(self):
        model_dir = QFileDialog.getOpenFileName(None, 'Choose data File', '')
        self.lineEdit_CNN_classification_imagetest_model_address.setText(model_dir[0])

    def openimage_cm(self, imgName):
        imgName = imgName.replace('\\', '/')
        jpg = QtGui.QPixmap(imgName).scaled(self.label_image_show_2.width(), self.label_image_show_2.height())
        # jpg = QtGui.QPixmap(imgName)
        self.label_image_show_2.setPixmap(jpg)

    def openimage_example(self, dataset_Name):
        dataset_Name = dataset_Name.replace('\\', '/')
        list = os.listdir(dataset_Name)
        name = os.listdir(dataset_Name + '/' + list[0])
        imgName = dataset_Name + '/' + list[0] + '/' + name[0]
        jpg = QtGui.QPixmap(imgName).scaled(self.label_image_show.width(), self.label_image_show.height())
        self.label_image_show.setPixmap(jpg)

    def clear_all(self):
        self.training_show.setText('')
        self.label_image_show.setPixmap(QtGui.QPixmap(""))
        self.label_image_show.repaint()
        self.label_image_show_2.setPixmap(QtGui.QPixmap(""))
        self.label_image_show_2.repaint()

class Thread_CNN_dataset_test(QThread):
    update_datasettest = pyqtSignal(dict)

    def __init__(self, dataset_test_address, model_address,dataset_name):
        super().__init__()
        self.out = ['标准遥感影像集识别：', '\n', '数据集地址：', dataset_test_address,'\n','模型地址：',model_address]
        # if channel_num=='3':
        #     self.out.extend(['mean0,mean1,mean2:',mean0,',',mean1,',',mean2,' std0,std1,std2:',std0,',',std1,',',std2, '\n'])
        # elif channel_num=='1':
        #     self.out.extend(['mean0:',mean0,'   std0:',std0])
        self.dataset_test_address, self.model_address, self.dataset_name, self.resize, self.centercrop, self.mean0, self.mean1, self.mean2, self.std0, self.std1, self.std2=\
            dataset_test_address.replace('\\', '/'), model_address.replace('\\', '/'), dataset_name, int(600), int(600), float(0.485), float(0.456), float(0.406), float(0.229), float(0.224), float(0.225)
    def run(self):

        test_result = self.test()
        self.update_datasettest.emit(test_result)
    def test(self):

        sub_dir = os.listdir(self.dataset_test_address)
        since = time.time()
        if self.dataset_name == 'uc':
            data_transforms = transforms.Compose([transforms.Resize(224),
                                                  transforms.CenterCrop(224),
                                       transforms.ToTensor(),
                                       transforms.Normalize((0.44979182, 0.48921227, 0.48212156), (0.19673954, 0.20322968, 0.21901236))])

        elif self.dataset_name == 'mstar':
            data_transforms =transforms.Compose([
        transforms.Grayscale(1),
        transforms.Resize(128),
        transforms.CenterCrop(128),
        transforms.ToTensor(),
        transforms.Normalize((0.184,), (0.119,))])
        elif self.dataset_name == 'fusarship':
            data_transforms = transforms.Compose([
                transforms.Grayscale(1),
                transforms.CenterCrop(512),
                transforms.ToTensor(),
            ])
        elif self.dataset_name == 'fgsc':
            data_transforms = transforms.Compose([transforms.Resize((224, 224)),
                                       transforms.ToTensor(),
                                       transforms.Normalize((0.352978, 0.373653, 0.359517), (0.4979, 0.4846, 0.4829))])
        elif self.dataset_name == 'sortedcars':
            data_transforms = transforms.Compose([transforms.Resize((224, 224)),
                                       transforms.ToTensor(),
                                       transforms.Normalize((0.500798, 0.487246, 0.446257), (0.3841, 0.3740,  0.3781))])

        image_datasets = datasets.ImageFolder(self.dataset_test_address,data_transforms)
        dataloders = torch.utils.data.DataLoader(image_datasets,
                                                     batch_size=16,
                                                     shuffle=True,
                                                     num_workers=0)
        dataset_sizes = len(image_datasets)
        model = torch.load(self.model_address)
        # print(self.dataset_name,self.model_address,data_transforms,dataset_sizes)
        use_gpu = torch.cuda.is_available()

        model.eval()
        running_corrects = 0.0

        # Iterate over data.
        preds_all = np.zeros(dataset_sizes)
        labels_all = np.zeros(dataset_sizes)
        i = 0
        for data in tqdm(dataloders):
            # get the inputs
            inputs, labels = data
            # wrap them in Variable
            if use_gpu:
                inputs = Variable(inputs.cuda())
                labels = Variable(labels.cuda())
            else:
                inputs, labels = Variable(inputs), Variable(labels)
            # zero the parameter gradients
            # forward
            outputs = model(inputs)
            # print (outputs.shape)
            _, preds = torch.max(outputs.data, 1)
            # statistics
            running_corrects += torch.sum(preds == labels.data).to(torch.float32)
            preds_all[i*preds.shape[0]:(i+1)*preds.shape[0]] = preds.cpu().detach().numpy()
            labels_all[i * preds.shape[0]: (i + 1) * preds.shape[0]] = labels.cpu().detach().numpy()
            i+=1
        print(preds_all)
        print(labels_all)
        test_cm = confusion_matrix(labels_all, preds_all)
        epoch_acc = running_corrects / dataset_sizes
        time_elapsed = time.time() - since
        self.out.extend(['\n','测试用时：',time_elapsed,'s','\n','分类正确率为： ',float(epoch_acc*100),'%'])
        out = [str(i) for i in self.out]
        out = "".join(out)
        test_out_log = out.split('\n')
        print(test_out_log)
        # write_excel_xlsx('log.xlsx', test_out_log)
        return ({0:out,1:test_cm,2:sub_dir,3:str(round(float(epoch_acc.cpu().detach().numpy())*100,2))})
def write_excel_xlsx(path, value):
    index = len(value)
    # 打开excel
    xl = load_workbook(path)
    # 获取所有sheet页名字
    xl_sheet_names = xl.get_sheet_names()
    # 定位到相应sheet页,[0]为sheet页索引
    xl_sheet = xl.get_sheet_by_name(xl_sheet_names[0])
    # 获取行列数
    row = xl_sheet.max_row
    if row == 0:
        ge = -2
    else:
        ge = 2
    # sheet.title = sheet_name
    for i in range(0, index):
        xl_sheet.cell(row=i + ge +row, column=1, value=str(value[i]))
    xl.save(path)
    print("xlsx格式表格写入数据成功！")

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    train = QtWidgets.QDialog()
    ui = Ui_CNN_dataset_test()
    ui.setupUi(train)
    ui.caolianjie()
    train.show()
    sys.exit(app.exec_())
