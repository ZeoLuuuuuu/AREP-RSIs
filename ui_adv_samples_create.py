# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'ui_adv_samples_create.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5.QtGui import QIcon
import pyttsx3
from PyQt5.Qt import QApplication, QWidget, QPushButton,QThread,QMutex,QButtonGroup
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.Qt import pyqtSignal
from PyQt5.QtWidgets import QFileDialog
import numpy as np
import time
import torch
import torch.nn as nn
import torch.optim as optim
from torch.autograd import Variable
from torchvision import datasets, models, transforms
from torch.utils.data import TensorDataset,DataLoader
import os
from sklearn.metrics import confusion_matrix
import matplotlib.pyplot as plt
plt.switch_backend('TKAgg')
from tqdm import trange,tqdm
from art.attacks.evasion import ProjectedGradientDescent,DeepFool,CarliniLInfMethod,ThresholdAttack,SquareAttack,FastGradientMethod,BasicIterativeMethod,SpatialTransformation
from art.estimators.classification import PyTorchClassifier
from openpyxl import load_workbook
from torchvision.utils import save_image
import matplotlib as mpl
device=torch.device('cuda:0' if torch.cuda.is_available() else 'cpu')
mpl.rcParams["font.sans-serif"] = ["SimHei"]
mpl.rcParams["axes.unicode_minus"] = False


class Ui_CNN_dataset_adv_creat(object):
    def setupUi(self, CNN_dataset_test):
        CNN_dataset_test.setObjectName("CNN_dataset_test")
        CNN_dataset_test.resize(1170, 626)
        font = QtGui.QFont()
        font.setPointSize(10)
        CNN_dataset_test.setFont(font)
        self.label_2 = QtWidgets.QLabel(CNN_dataset_test)
        self.label_2.setGeometry(QtCore.QRect(33, 30, 221, 41))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(13)
        self.label_2.setFont(font)
        self.label_2.setObjectName("label_2")
        self.pushButton = QtWidgets.QPushButton(CNN_dataset_test)
        self.pushButton.setGeometry(QtCore.QRect(530, 410, 181, 31))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(14)
        self.pushButton.setFont(font)
        self.pushButton.setObjectName("pushButton")
        self.training_show = QtWidgets.QLabel(CNN_dataset_test)
        self.training_show.setGeometry(QtCore.QRect(0, 460, 1171, 171))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(11)
        self.training_show.setFont(font)
        self.training_show.setStyleSheet("background-color: rgb(127, 130, 136);\n"
                                         "")
        self.training_show.setFrameShadow(QtWidgets.QFrame.Raised)
        self.training_show.setLineWidth(3)
        self.training_show.setText("")
        self.training_show.setScaledContents(False)
        self.training_show.setAlignment(QtCore.Qt.AlignLeading | QtCore.Qt.AlignLeft | QtCore.Qt.AlignTop)
        self.training_show.setObjectName("training_show")
        self.label_21 = QtWidgets.QLabel(CNN_dataset_test)
        self.label_21.setGeometry(QtCore.QRect(32, 120, 201, 41))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(13)
        self.label_21.setFont(font)
        self.label_21.setObjectName("label_21")
        self.label_image_show = QtWidgets.QLabel(CNN_dataset_test)
        self.label_image_show.setGeometry(QtCore.QRect(705, 92, 211, 211))
        self.label_image_show.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.label_image_show.setText("")
        self.label_image_show.setObjectName("label_image_show")
        self.label = QtWidgets.QLabel(CNN_dataset_test)
        self.label.setGeometry(QtCore.QRect(679, 311, 251, 31))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(12)
        self.label.setFont(font)
        self.label.setAlignment(QtCore.Qt.AlignCenter)
        self.label.setObjectName("label")
        self.lineEdit_CNN_classification_imagetest_model_address = QtWidgets.QLineEdit(CNN_dataset_test)
        self.lineEdit_CNN_classification_imagetest_model_address.setGeometry(QtCore.QRect(90, 70, 531, 21))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(11)
        self.lineEdit_CNN_classification_imagetest_model_address.setFont(font)
        self.lineEdit_CNN_classification_imagetest_model_address.setStyleSheet("background-color: rgb(243, 243, 243);")
        self.lineEdit_CNN_classification_imagetest_model_address.setAlignment(QtCore.Qt.AlignCenter)
        self.lineEdit_CNN_classification_imagetest_model_address.setObjectName(
            "lineEdit_CNN_classification_imagetest_model_address")
        self.pushButton_CNN_classification_imagetest_model_address = QtWidgets.QPushButton(CNN_dataset_test)
        self.pushButton_CNN_classification_imagetest_model_address.setGeometry(QtCore.QRect(620, 70, 31, 21))
        self.pushButton_CNN_classification_imagetest_model_address.setStyleSheet("background-color: rgb(98, 98, 98);")
        self.pushButton_CNN_classification_imagetest_model_address.setObjectName(
            "pushButton_CNN_classification_imagetest_model_address")
        self.lineEdit_CNN_classification_imagetest_image_address = QtWidgets.QLineEdit(CNN_dataset_test)
        self.lineEdit_CNN_classification_imagetest_image_address.setGeometry(QtCore.QRect(260, 470, 351, 21))
        self.lineEdit_CNN_classification_imagetest_image_address.setObjectName(
            "lineEdit_CNN_classification_imagetest_image_address")
        self.label_4 = QtWidgets.QLabel(CNN_dataset_test)
        self.label_4.setGeometry(QtCore.QRect(34, 230, 151, 41))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(13)
        self.label_4.setFont(font)
        self.label_4.setObjectName("label_4")
        self.label_image_show_2 = QtWidgets.QLabel(CNN_dataset_test)
        self.label_image_show_2.setGeometry(QtCore.QRect(946, 91, 201, 211))
        self.label_image_show_2.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.label_image_show_2.setText("")
        self.label_image_show_2.setObjectName("label_image_show_2")
        self.label_3 = QtWidgets.QLabel(CNN_dataset_test)
        self.label_3.setGeometry(QtCore.QRect(920, 310, 251, 31))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(12)
        self.label_3.setFont(font)
        self.label_3.setAlignment(QtCore.Qt.AlignCenter)
        self.label_3.setObjectName("label_3")
        self.label_5 = QtWidgets.QLabel(CNN_dataset_test)
        self.label_5.setGeometry(QtCore.QRect(34, 356, 161, 41))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(13)
        self.label_5.setFont(font)
        self.label_5.setObjectName("label_5")
        self.lineEdit = QtWidgets.QLineEdit(CNN_dataset_test)
        self.lineEdit.setGeometry(QtCore.QRect(175, 367, 91, 20))
        self.lineEdit.setObjectName("lineEdit")
        self.label_6 = QtWidgets.QLabel(CNN_dataset_test)
        self.label_6.setGeometry(QtCore.QRect(320, 356, 131, 41))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(13)
        self.label_6.setFont(font)
        self.label_6.setObjectName("label_6")
        self.lineEdit_2 = QtWidgets.QLineEdit(CNN_dataset_test)
        self.lineEdit_2.setGeometry(QtCore.QRect(452, 366, 91, 20))
        self.lineEdit_2.setObjectName("lineEdit_2")
        self.lineEdit_3 = QtWidgets.QLineEdit(CNN_dataset_test)
        self.lineEdit_3.setGeometry(QtCore.QRect(320, 510, 113, 20))
        self.lineEdit_3.setObjectName("lineEdit_3")
        self.radioButton_4 = QtWidgets.QRadioButton(CNN_dataset_test)
        self.radioButton_4.setGeometry(QtCore.QRect(90, 180, 89, 21))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(12)
        self.radioButton_4.setFont(font)
        self.radioButton_4.setChecked(True)
        self.radioButton_4.setObjectName("radioButton_4")
        self.radioButton_2 = QtWidgets.QRadioButton(CNN_dataset_test)
        self.radioButton_2.setGeometry(QtCore.QRect(300, 180, 111, 21))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(12)
        self.radioButton_2.setFont(font)
        self.radioButton_2.setObjectName("radioButton_2")
        self.radioButton = QtWidgets.QRadioButton(CNN_dataset_test)
        self.radioButton.setGeometry(QtCore.QRect(420, 180, 151, 21))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(12)
        self.radioButton.setFont(font)
        self.radioButton.setObjectName("radioButton")
        self.radioButton_3 = QtWidgets.QRadioButton(CNN_dataset_test)
        self.radioButton_3.setGeometry(QtCore.QRect(180, 180, 89, 21))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(12)
        self.radioButton_3.setFont(font)
        self.radioButton_3.setObjectName("radioButton_3")
        self.radioButton_9 = QtWidgets.QRadioButton(CNN_dataset_test)
        self.radioButton_9.setGeometry(QtCore.QRect(570, 180, 121, 21))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(12)
        self.radioButton_9.setFont(font)
        self.radioButton_9.setObjectName("radioButton_9")
        self.frame = QtWidgets.QFrame(CNN_dataset_test)
        self.frame.setGeometry(QtCore.QRect(80, 270, 611, 80))
        self.frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame.setObjectName("frame")
        self.radioButton_5 = QtWidgets.QRadioButton(self.frame)
        self.radioButton_5.setGeometry(QtCore.QRect(110, 30, 89, 20))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(12)
        self.radioButton_5.setFont(font)
        self.radioButton_5.setChecked(False)
        self.radioButton_5.setObjectName("radioButton_5")
        self.radioButton_6 = QtWidgets.QRadioButton(self.frame)
        self.radioButton_6.setGeometry(QtCore.QRect(338, 31, 89, 16))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(12)
        self.radioButton_6.setFont(font)
        self.radioButton_6.setObjectName("radioButton_6")
        self.radioButton_8 = QtWidgets.QRadioButton(self.frame)
        self.radioButton_8.setGeometry(QtCore.QRect(217, 30, 121, 16))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(12)
        self.radioButton_8.setFont(font)
        self.radioButton_8.setObjectName("radioButton_8")
        self.radioButton_7 = QtWidgets.QRadioButton(self.frame)
        self.radioButton_7.setGeometry(QtCore.QRect(440, 23, 161, 31))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(12)
        self.radioButton_7.setFont(font)
        self.radioButton_7.setObjectName("radioButton_7")
        self.radioButton_10 = QtWidgets.QRadioButton(self.frame)
        self.radioButton_10.setGeometry(QtCore.QRect(10, 30, 89, 20))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(12)
        self.radioButton_10.setFont(font)
        self.radioButton_10.setChecked(True)
        self.radioButton_10.setObjectName("radioButton_10")
        self.lineEdit_3.raise_()
        self.label_2.raise_()
        self.pushButton.raise_()
        self.label_21.raise_()
        self.label_image_show.raise_()
        self.label.raise_()
        self.lineEdit_CNN_classification_imagetest_model_address.raise_()
        self.pushButton_CNN_classification_imagetest_model_address.raise_()
        self.lineEdit_CNN_classification_imagetest_image_address.raise_()
        self.training_show.raise_()
        self.label_4.raise_()
        self.label_image_show_2.raise_()
        self.label_3.raise_()
        self.label_5.raise_()
        self.lineEdit.raise_()
        self.label_6.raise_()
        self.lineEdit_2.raise_()
        self.radioButton_4.raise_()
        self.radioButton_2.raise_()
        self.radioButton.raise_()
        self.radioButton_3.raise_()
        self.radioButton_9.raise_()
        self.frame.raise_()

        self.retranslateUi(CNN_dataset_test)
        QtCore.QMetaObject.connectSlotsByName(CNN_dataset_test)
        self.dataset = 'uc'
        self.lineEdit_CNN_classification_imagetest_image_address.setText("Data\场景\\UCMerced_LandUse\\val")
        self.lineEdit_3.setText('PGD')

    def retranslateUi(self, CNN_dataset_test):
        _translate = QtCore.QCoreApplication.translate
        CNN_dataset_test.setWindowTitle(_translate("CNN_dataset_test", "Generate Adversarial Examples"))
        CNN_dataset_test.setWindowIcon(QIcon("./1.ico"))
        self.label_2.setText(_translate("CNN_dataset_test", "Model Address:"))
        self.pushButton.setText(_translate("CNN_dataset_test", "Start to Craft"))
        self.label_21.setText(_translate("CNN_dataset_test", "Select Dataset："))
        self.label.setText(_translate("CNN_dataset_test", "Example in Benign Data"))
        self.lineEdit_CNN_classification_imagetest_model_address.setText(_translate("CNN_dataset_test", "pkl_save\\uc_resnet18.pkl"))
        self.pushButton_CNN_classification_imagetest_model_address.setText(_translate("CNN_dataset_test", "…"))
        self.label_4.setText(_translate("CNN_dataset_test", "Attack Methods："))
        self.label_3.setText(_translate("CNN_dataset_test", "Example in Adversarial Data"))
        self.label_5.setText(_translate("CNN_dataset_test", "# of Channels："))
        self.lineEdit.setText(_translate("CNN_dataset_test", "3"))
        self.label_6.setText(_translate("CNN_dataset_test", "# of Classes："))
        self.lineEdit_2.setText(_translate("CNN_dataset_test", "21"))
        self.radioButton_4.setText(_translate("CNN_dataset_test", "UC"))
        self.radioButton_2.setText(_translate("CNN_dataset_test", "FGSC-23"))
        self.radioButton.setText(_translate("CNN_dataset_test", "FUSAR-Ship"))
        self.radioButton_3.setText(_translate("CNN_dataset_test", "MSTAR"))
        self.radioButton_9.setText(_translate("CNN_dataset_test", "AID"))
        self.radioButton_5.setText(_translate("CNN_dataset_test", " PGD"))
        self.radioButton_6.setText(_translate("CNN_dataset_test", " C&W"))
        self.radioButton_8.setText(_translate("CNN_dataset_test", "Deepfool"))
        self.radioButton_7.setText(_translate("CNN_dataset_test", " HopSkipJump"))
        self.radioButton_10.setText(_translate("CNN_dataset_test", " FGSM"))

    def caolianjie(self):
        # self.pushButton_CNN_classification_imagetest_image_address.clicked.connect(self.choose_CNN_dataset_test_data_dir)
        self.radioButton.toggled.connect(self.dataset_select_set_visible)
        self.radioButton_2.toggled.connect(self.dataset_select_set_visible)
        self.radioButton_3.toggled.connect(self.dataset_select_set_visible)
        self.radioButton_4.toggled.connect(self.dataset_select_set_visible)
        self.radioButton_5.toggled.connect(self.attack_select_set_visible)
        self.radioButton_6.toggled.connect(self.attack_select_set_visible)
        self.radioButton_7.toggled.connect(self.attack_select_set_visible)
        self.radioButton_8.toggled.connect(self.attack_select_set_visible)
        self.radioButton_9.toggled.connect(self.attack_select_set_visible)
        self.radioButton_10.toggled.connect(self.attack_select_set_visible)
        self.pushButton_CNN_classification_imagetest_model_address.clicked.connect(self.choose_CNN_dataset_test_model_dir)
        self.pushButton.clicked.connect(self.clear_all)
        # self.pushButton.clicked.connect(lambda :self.openimage_example(self.lineEdit_CNN_classification_imagetest_image_address.text()))
        self.pushButton.clicked.connect(lambda : self.CNN_dataset_test(self.lineEdit_CNN_classification_imagetest_image_address.text(),
                                                                       self.lineEdit_CNN_classification_imagetest_model_address.text(),self.lineEdit.text(),self.lineEdit_2.text()
                                                                       ,self.lineEdit_3.text(),self.dataset))


    def attack_select_set_visible(self):
        if self.radioButton_5.isChecked():
            attack = "PGD"
            self.lineEdit_3.setText(attack)
        elif self.radioButton_6.isChecked():
            attack = "CW"
            self.lineEdit_3.setText(attack)
        elif self.radioButton_7.isChecked():
            attack = "HopSkipJump"
            self.lineEdit_3.setText(attack)
        elif self.radioButton_8.isChecked():
            attack = "Deepfool"
            self.lineEdit_3.setText(attack)
        elif self.radioButton_10.isChecked():
            attack = "FGSM"
            self.lineEdit_3.setText(attack)
    def dataset_select_set_visible(self):
        if self.radioButton.isChecked():
            self.dataset = 'fusarship'
            self.lineEdit.setText('1')
            self.lineEdit_2.setText('4')
            data_dir = "./Data/Targets/FUSAR_Ship_jpg/val"
            self.lineEdit_CNN_classification_imagetest_image_address.setText(data_dir)
            # self.openimage_example(data_dir)
        elif self.radioButton_2.isChecked():
            self.dataset = 'fgsc'
            self.lineEdit.setText('3')
            self.lineEdit_2.setText('17')
            data_dir = "Data\Targets\\FGSC-23\\val"
            self.lineEdit_CNN_classification_imagetest_image_address.setText(data_dir)
            # self.openimage_example(data_dir)
        elif self.radioButton_3.isChecked():
            self.dataset = 'mstar'
            self.lineEdit.setText('1')
            self.lineEdit_2.setText('10')
            data_dir = "Data\Targets\MSTAR-10\\val"
            self.lineEdit_CNN_classification_imagetest_image_address.setText(data_dir)
            # self.openimage_example(data_dir)
        elif self.radioButton_4.isChecked():
            self.dataset = 'uc'
            self.lineEdit.setText('3')
            self.lineEdit_2.setText('21')
            data_dir = "Data\Scene\\UCMerced_LandUse\\val"
            self.lineEdit_CNN_classification_imagetest_image_address.setText(data_dir)
            # self.openimage_example((data_dir))
        elif self.radioButton_9.isChecked():
            self.dataset = 'sortedcars'
            self.lineEdit.setText('3')
            self.lineEdit_2.setText('4')
            data_dir = "Data\Targets\\Sorted_Cars\\val"
            self.lineEdit_CNN_classification_imagetest_image_address.setText(data_dir)

    def CNN_dataset_test(self, dataset_test_address, model_address, channel_num,class_num,attack_method,dataset_name):
        print('eee')
        self.thread_image_test = Thread_CNN_dataset_test(dataset_test_address, model_address, channel_num,class_num,attack_method,dataset_name)
        self.thread_image_test.update_datasettest.connect(self.get_CNN_dataset_test_result)
        self.thread_image_test.start()
        self.thread_image_test.exec()

    def get_CNN_dataset_test_result(self, test_result):
        self.training_show.setText(test_result[0])
        self.training_show.repaint()


        self.training_show.repaint()

        engine = pyttsx3.init()
        engine.say('分类正确率为')
        engine.say('百分之')
        engine.say(test_result[3])
        engine.runAndWait()

        # test_cm = test_result[1]
        # print(test_cm)
        # sub_dir = test_result[2]
        ori_image = test_result[4]
        adv_image = test_result[5]
        # plt.imshow(test_cm, cmap=plt.cm.Reds)
        # indices = range(int(self.lineEdit_2.text()))
        # plt.xticks(indices, sub_dir,rotation=270)
        # plt.yticks(indices, sub_dir,rotation=270)
        # # plt.colorbar()

        # plt.xlabel('预测标签')
        # plt.ylabel('真实标签')
        # plt.title('混淆矩阵')
        # plt.rcParams['font.sans-serif'] = ['SimHei']
        # plt.rcParams['axes.unicode_minus'] = False

        # for first_index in range(len(test_cm)):  # 第几行
        #     for second_index in range(len(test_cm[first_index])):  # 第几列
        #         plt.text(first_index, second_index, test_cm[first_index][second_index], verticalalignment='center',
        #                  horizontalalignment='center')
        # plt.show()
        # plt.savefig('result_image/CNN_cm.jpg')
        # plt.close('all')
        # self.openimage_cm('result_image/CNN_cm.jpg')
        save_image(torch.from_numpy(ori_image), 'result_image/original_image.jpg')
        self.openimage_ori('result_image/original_image.jpg')
        save_image(torch.from_numpy(adv_image), 'result_image/original_image.jpg')
        self.openimage_adv('result_image/original_image.jpg')

    # def choose_CNN_dataset_test_data_dir(self):
    #     data_dir = QFileDialog.getExistingDirectory(None, 'Choose data File', '')
    #     self.lineEdit_CNN_classification_imagetest_image_address.setText(data_dir)
    #     self.openimage_example(data_dir)

    def choose_CNN_dataset_test_model_dir(self):
        model_dir = QFileDialog.getOpenFileName(None, 'Choose data File', '')
        self.lineEdit_CNN_classification_imagetest_model_address.setText(model_dir[0])

    # def openimage_cm(self,imgName):
    #     imgName = imgName.replace('\\', '/')
    #     # jpg = QtGui.QPixmap(imgName).scaled(self.label_image_show_2.width(), self.label_image_show_2.height())
    #     jpg = QtGui.QPixmap(imgName)
    #     self.label_image_show_3.setPixmap(jpg)

    def openimage_ori(self,imgName):
        imgName = imgName.replace('\\', '/')
        jpg = QtGui.QPixmap(imgName).scaled(self.label_image_show_2.width(), self.label_image_show_2.height())
        # jpg = QtGui.QPixmap(imgName)
        self.label_image_show.setPixmap(jpg)

    def openimage_adv(self,imgName):
        imgName = imgName.replace('\\', '/')
        jpg = QtGui.QPixmap(imgName).scaled(self.label_image_show_2.width(), self.label_image_show_2.height())
        # jpg = QtGui.QPixmap(imgName)
        self.label_image_show_2.setPixmap(jpg)

    # def openimage_example(self,dataset_Name):
    #     dataset_Name = dataset_Name.replace('\\', '/')
    #     list = os.listdir(dataset_Name)
    #     name = os.listdir(dataset_Name+'/'+list[0])
    #     imgName = dataset_Name+'/'+list[0]+'/'+name[0]
    #     jpg = QtGui.QPixmap(imgName).scaled(self.label_image_show.width(), self.label_image_show.height())
    #     self.label_image_show.setPixmap(jpg)
    def clear_all(self):
        self.training_show.setText('')
        self.label_image_show.setPixmap(QtGui.QPixmap(""))
        self.label_image_show.repaint()
        self.label_image_show_2.setPixmap(QtGui.QPixmap(""))
        self.label_image_show_2.repaint()

class Thread_CNN_dataset_test(QThread):
    update_datasettest = pyqtSignal(dict)

    def __init__(self, dataset_test_address, model_address,channel_num,class_num,attack_method,dataset_name):
        super().__init__()
        self.out = ['Done!', '\n', 'Dataset Address：', dataset_test_address,'\n','Model Address：',model_address]
        # if channel_num=='3':
        #     self.out.extend(['mean0,mean1,mean2:',mean0,',',mean1,',',mean2,' std0,std1,std2:',std0,',',std1,',',std2, '\n'])
        # elif channel_num=='1':
        #     self.out.extend(['mean0:',mean0,'   std0:',std0])

        self.dataset_test_address, self.model_address, self.channel_num,self.class_num,self.attack_method,self.resize, self.centercrop, self.mean0, self.mean1, self.mean2, self.std0, self.std1, self.std2,self.dataset_name=\
            dataset_test_address.replace('\\', '/'), model_address.replace('\\', '/'), \
            int(channel_num),int(class_num),\
            attack_method, int(600), int(600), float(0.485), float(0.456), float(0.406), float(0.229), float(0.224), float(0.225),dataset_name
    def run(self):
        test_result = self.test()
        self.update_datasettest.emit(test_result)
    def test(self):
        sub_dir = os.listdir(self.dataset_test_address)
        since = time.time()
        if self.dataset_name== 'uc':
            data_transforms = transforms.Compose([transforms.Resize((224, 224)),
                                       transforms.ToTensor(),
                                       transforms.Normalize((0.44979182, 0.48921227, 0.48212156), (0.19673954, 0.20322968, 0.21901236))])

        elif self.dataset_name== 'mstar':
            data_transforms = transforms.Compose([
                transforms.Grayscale(1),
                transforms.CenterCrop(128),
                transforms.ToTensor(),
                transforms.Normalize([0.184, ], [0.119, ])
            ])
        elif self.dataset_name== 'fusarship':
            data_transforms = transforms.Compose([
                transforms.Grayscale(1),
                transforms.CenterCrop(512),
                transforms.ToTensor(),
            ])

        elif self.dataset_name== 'fgsc':
            data_transforms = transforms.Compose([transforms.Resize((224, 224)),
                                       transforms.ToTensor(),
                                       transforms.Normalize((0.352978, 0.373653, 0.359517), (0.4979, 0.4846, 0.4829))])
        elif self.dataset_name == 'sortedcars':
            data_transforms = transforms.Compose([transforms.Resize((224, 224)),
                                       transforms.ToTensor(),
                                       transforms.Normalize((0.500798, 0.487246, 0.446257), (0.3841, 0.3740,  0.3781))])
        image_datasets = datasets.ImageFolder(self.dataset_test_address,data_transforms)
        print(self.dataset_test_address)
        dataset_sizes = len(image_datasets)
        print(dataset_sizes,'labels_all, preds_all')
        dataloders = DataLoader(image_datasets,
                                batch_size=len(image_datasets),
                                shuffle=False,
                                num_workers=0)
        for data_test in dataloders:
            test_images, test_labels = data_test
        x_test = test_images.numpy()
        # np.save('npy_save\\uc_val_normalized.npy',x_test)
        y_test = test_labels.numpy()
        # np.save('npy_save\\uc_val_labels.npy',y_test)
        #print(y_test,'y_test')
        model = torch.load(self.model_address)

        use_gpu = torch.cuda.is_available()

        model.eval()
        criterion = nn.CrossEntropyLoss()
        if self.dataset_name=='mstar':
            optimizer = optim.Adam(model.parameters(), lr=0.001, eps=1e-08)
            classifier = PyTorchClassifier(
                model=model,
                loss=criterion,
                clip_values=(-0.184 / 0.119, (1 - 0.184) / 0.119),
                optimizer=optimizer,
                input_shape=(1, 128, 128),
                nb_classes = self.class_num
            )
        elif self.dataset_name== 'uc':
            optimizer = optim.SGD(model.parameters(), lr=0.001, momentum=0.9)
            classifier = PyTorchClassifier(
                model=model,
                loss=criterion,
                clip_values=(-0.48921227 / 0.20322968, (1-0.44979182) / 0.196739541),
                optimizer = optimizer,
                input_shape = (3, 224, 224),
                nb_classes = self.class_num,
            )
        elif self.dataset_name== 'fusarship':
            optimizer = optim.SGD(model.parameters(), lr=0.001, momentum=0.9)
            classifier = PyTorchClassifier(
                model=model,
                loss=criterion,
                clip_values=(0, 1),
                optimizer = optimizer,
                input_shape = (1, 512, 512),
                nb_classes = self.class_num,
            )
        elif self.dataset_name== 'fgsc':
            optimizer = optim.SGD(model.parameters(), lr=0.001, momentum=0.9)
            classifier = PyTorchClassifier(
                model=model,
                loss=criterion,
                clip_values=(-0.373653/0.4846, (1-0.359517)/0.4829),
                optimizer = optimizer,
                input_shape = (3, 224, 224),
                nb_classes = self.class_num,
            )
        elif self.dataset_name== 'sortedcars':
            optimizer = optim.SGD(model.parameters(), lr=0.001, momentum=0.9)
            classifier = PyTorchClassifier(
                model=model,
                loss=criterion,
                clip_values=(-0.500798/0.3841, (1-0.446257)/0.3781),
                optimizer = optimizer,
                input_shape = (3, 224, 224),
                nb_classes = self.class_num,
            )
        # print(self.channel_num)
        if self.attack_method == "PGD":
            attack = ProjectedGradientDescent(estimator=classifier,batch_size=16,eps=0.125, eps_step=0.02,max_iter=50)
        elif self.attack_method == "CW":
            attack = CarliniLInfMethod(classifier=classifier, batch_size=32,max_iter=20)
        elif self.attack_method == "Deepfool":
            attack = DeepFool(classifier=classifier,batch_size= 8)
        elif self.attack_method == "HopSkipJump":
            attack = SquareAttack(classifier=classifier,batch_size=8)
        elif self.attack_method == "FGSM":
            attack = FastGradientMethod(classifier=classifier,max_translation=10,max_rotation=45,num_rotations=6,num_translations=6)
        # print(self.attack_method,'wwwwwwwwwwwwwwwwwwwwwww')
        print(x_test.shape,'x_test.shape')
        x_test_adv = attack.generate(x=x_test)
        # print(x_test_adv)
        if self.dataset_name== 'mstar':
            x_test_adv = x_test_adv.clip(-184 / 119, 816 / 119)
            x_test_example = x_test[1, :, :, :].squeeze()*0.119+0.184
            x_test_adv_example = x_test_adv[1, :, :, :].squeeze()*0.119+0.184
        elif self.dataset_name== 'fusarship':
            x_test_example = x_test[0, :, :, :].squeeze()
            x_test_adv_example = x_test_adv[0, :, :, :].squeeze()
        elif self.dataset_name=='uc':
            x_test_adv[:, 0, :, :] = x_test_adv[:, 0, :, :].clip(-0.44979182 / 0.19673954, (1-0.44979182) / 0.196739541)
            x_test_adv[:, 1, :, :] = x_test_adv[:, 1, :, :].clip(-0.48921227 / 0.20322968, (1-0.48921227) / 0.20322968)
            x_test_adv[:, 2, :, :] = x_test_adv[:, 2, :, :].clip(-0.48212156 / 0.21901236, (1-0.48212156) / 0.21901236)
            x_test_example = np.copy(x_test[3, :, :, :].squeeze())
            x_test_example[0, :, :] = x_test_example[0, :, :]*0.19673954+0.44979182
            x_test_example[1, :, :] = x_test_example[1, :, :]*0.20322968+0.48921227
            x_test_example[2, :, :] = x_test_example[2, :, :]*0.21901236+0.48212156
            x_test_adv_example = np.copy(x_test_adv[3, :, :, :].squeeze())
            x_test_adv_example[0, :, :] = x_test_adv_example[0, :, :]*0.19673954+0.44979182
            x_test_adv_example[1, :, :] = x_test_adv_example[1, :, :]*0.20322968+0.48921227
            x_test_adv_example[2, :, :] = x_test_adv_example[2, :, :]*0.21901236+0.48212156
        elif self.dataset_name=='fgsc':
            x_test_adv[:, 0, :, :] = x_test_adv[:, 0, :, :].clip(-0.352978 / 0.4979, (1-0.352978) / 0.4979)
            x_test_adv[:, 1, :, :] = x_test_adv[:, 1, :, :].clip(-0.373653 / 0.4846, (1-0.373653) / 0.4846)
            x_test_adv[:, 2, :, :] = x_test_adv[:, 2, :, :].clip(-0.359517 / 0.4829, (1-0.359517) / 0.4829)
            x_test_example = np.copy(x_test[3, :, :, :].squeeze())
            x_test_example[0, :, :] = x_test_example[0, :, :]*0.4979+0.352978
            x_test_example[1, :, :] = x_test_example[1, :, :]*0.4846+0.373653
            x_test_example[2, :, :] = x_test_example[2, :, :]*0.4829+0.359517
            x_test_adv_example = np.copy(x_test_adv[3, :, :, :].squeeze())
            x_test_adv_example[0, :, :] = x_test_adv_example[0, :, :]*0.4979+0.352978
            x_test_adv_example[1, :, :] = x_test_adv_example[1, :, :]*0.4846+0.373653
            x_test_adv_example[2, :, :] = x_test_adv_example[2, :, :]*0.4829+0.359517
        elif self.dataset_name=='sortedcars':
            x_test_adv[:, 0, :, :] = x_test_adv[:, 0, :, :].clip(-0.500798 / 0.3841, (1-0.500798) / 0.3841)
            x_test_adv[:, 1, :, :] = x_test_adv[:, 1, :, :].clip(-0.487246 / 0.3740, (1-0.487246) / 0.3740)
            x_test_adv[:, 2, :, :] = x_test_adv[:, 2, :, :].clip(-0.446257 / 0.3781, (1-0.446257) / 0.3781)
            x_test_example = np.copy(x_test[3, :, :, :].squeeze())
            x_test_example[0, :, :] = x_test_example[0, :, :]*0.3841+0.500798
            x_test_example[1, :, :] = x_test_example[1, :, :]*0.3740+0.487246
            x_test_example[2, :, :] = x_test_example[2, :, :]*0.3781+0.446257
            x_test_adv_example = np.copy(x_test_adv[3, :, :, :].squeeze())
            x_test_adv_example[0, :, :] = x_test_adv_example[0, :, :]*0.3841+0.500798
            x_test_adv_example[1, :, :] = x_test_adv_example[1, :, :]*0.3740+0.487246
            x_test_adv_example[2, :, :] = x_test_adv_example[2, :, :]*0.3781+0.446257
        np.save("{}_{}.npy".format(self.dataset_test_address, self.attack_method), x_test_adv)
        # Save adv_samples


        # def unnormalize(img):
        #     img[:, 0, :, :] = img[:, 0, :, :] * 0.229 + 0.485  # unnormalize
        #     return img

        # nature_samples = unnormalize(x_test)
        # adv_samples = unnormalize(x_test_adv)

        # plt.figure(figsize=(12, 6))  # 设置窗口大小
        # plt.subplot(1, 2, 1), plt.title('Original Image')
        # plt.imshow(x_test[2, :, :, :].squeeze(), cmap="gray"), plt.axis('on')
        # plt.subplot(1, 2, 2), plt.title('Perturbed Image')
        # plt.imshow(x_test_adv[2, :, :, :].squeeze(), cmap="gray"), plt.axis('on')
        #
        # plt.show()
        #
        #
        running_corrects = 0.0
        # Iterate over data.
        preds_all = np.zeros(dataset_sizes)
        labels_all = np.zeros(dataset_sizes)
        # To Tensor
        x_adv_tensor = torch.from_numpy(x_test_adv)
        x_label_tensor = torch.from_numpy(y_test)
        # To Dataset
        x_adv_tensor_dataset = TensorDataset(x_adv_tensor, x_label_tensor)
        adv_loader = DataLoader(dataset=x_adv_tensor_dataset, batch_size=16, shuffle=False)
        i = 0
        for data in tqdm(adv_loader):
            # get the inputs
            inputs, labels = data
            # # wrap them in Variable
            if use_gpu:
                inputs = Variable(inputs.cuda())
                labels = Variable(labels.cuda())
            else:
                inputs, labels = Variable(inputs), Variable(labels)
            # zero the parameter gradients
            # forward
            #
            outputs = model(inputs)
            # print (outputs.shape)
            _, preds = torch.max(outputs.data, 1)
            # statistics
            running_corrects += torch.sum(preds == labels.data).to(torch.float32)

            preds_all[i*preds.shape[0]:(i+1)*preds.shape[0]] = preds.cpu().detach().numpy()
            labels_all[i * preds.shape[0]: (i + 1) * preds.shape[0]] = labels.cpu().detach().numpy()
            i+=1
        print(labels_all, preds_all)
        test_cm = confusion_matrix(labels_all, preds_all)
        epoch_acc = running_corrects / dataset_sizes
        time_elapsed = time.time() - since
        self.out.extend(['\n','对抗样本制作+测试用时：',time_elapsed,'s','\n','对抗欺骗样本识别准确率为： ',float(epoch_acc*100),'%'])
        out = [str(i) for i in self.out]
        out = "".join(out)
        test_out_log = out.split('\n')
        print(test_out_log)
        write_excel_xlsx('log.xlsx', test_out_log)
        return ({0:out,1:test_cm,2:sub_dir,3:str(round(float(epoch_acc.cpu().detach().numpy())*100,2)),4:x_test_example,5:x_test_adv_example,
                 6:"{}_{}.npy".format(self.dataset_test_address,self.attack_method)})


def write_excel_xlsx(path, value):
    index = len(value)
    # 打开excel
    xl = load_workbook(path)
    # 获取所有sheet页名字
    xl_sheet_names = xl.get_sheet_names()
    # 定位到相应sheet页,[0]为sheet页索引
    xl_sheet = xl.get_sheet_by_name(xl_sheet_names[0])
    # 获取行列数
    row = xl_sheet.max_row
    if row == 0:
        ge = -2
    else:
        ge = 2
    # sheet.title = sheet_name
    for i in range(0, index):
        xl_sheet.cell(row=i + ge +row, column=1, value=str(value[i]))
    xl.save(path)
    print("xlsx格式表格写入数据成功！")

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    train = QtWidgets.QDialog()
    ui = Ui_CNN_dataset_adv_creat()
    ui.setupUi(train)
    ui.caolianjie()
    train.show()
    sys.exit(app.exec_())