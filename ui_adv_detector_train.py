# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'ui_adv_detector_train.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
from __future__ import division, absolute_import, print_function
from PyQt5.QtGui import QIcon
import torch
from sklearn.linear_model import LogisticRegression
from sklearn.preprocessing import MinMaxScaler
from torchvision import datasets, models, transforms
import os
from Adv_Detect.common.util import *
from Adv_Detect.setup_paths import *
os.environ["CUDA_DEVICE_ORDER"] = "PCI_BUS_ID"
os.environ["CUDA_VISIBLE_DEVICES"] = ""
from Adv_Detect.fs.datasets.datasets_utils import *
from Adv_Detect.fs.utils.squeeze import *
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import QThread
from PyQt5.QtWidgets import QButtonGroup, QFileDialog
from PyQt5.Qt import pyqtSignal
from Adv_Detect.lid_util import (random_split, block_split, train_lr, compute_roc, get_lids_random_batch, get_noisy_samples)
from sklearn.model_selection import train_test_split

class Ui_CNN_Detector_train(object):
    def setupUi(self, CNN_Detector_train):
        CNN_Detector_train.setObjectName("CNN_Detector_train")
        CNN_Detector_train.resize(1279, 798)
        font = QtGui.QFont()
        font.setPointSize(10)
        CNN_Detector_train.setFont(font)
        self.label_Dataset = QtWidgets.QLabel(CNN_Detector_train)
        self.label_Dataset.setGeometry(QtCore.QRect(43, 174, 271, 41))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(13)
        self.label_Dataset.setFont(font)
        self.label_Dataset.setObjectName("label_Dataset")
        self.pushButton = QtWidgets.QPushButton(CNN_Detector_train)
        self.pushButton.setGeometry(QtCore.QRect(520, 524, 211, 31))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(13)
        self.pushButton.setFont(font)
        self.pushButton.setObjectName("pushButton")
        self.training_show = QtWidgets.QLabel(CNN_Detector_train)
        self.training_show.setGeometry(QtCore.QRect(0, 580, 1281, 221))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(11)
        self.training_show.setFont(font)
        self.training_show.setStyleSheet("background-color: rgb(127, 130, 136);\n"
"")
        self.training_show.setFrameShadow(QtWidgets.QFrame.Raised)
        self.training_show.setLineWidth(3)
        self.training_show.setText("")
        self.training_show.setScaledContents(False)
        self.training_show.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignTop)
        self.training_show.setObjectName("training_show")
        self.label_image_show = QtWidgets.QLabel(CNN_Detector_train)
        self.label_image_show.setGeometry(QtCore.QRect(725, 146, 231, 231))
        self.label_image_show.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.label_image_show.setText("")
        self.label_image_show.setObjectName("label_image_show")
        self.label = QtWidgets.QLabel(CNN_Detector_train)
        self.label.setGeometry(QtCore.QRect(689, 386, 291, 31))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(10)
        self.label.setFont(font)
        self.label.setAlignment(QtCore.Qt.AlignCenter)
        self.label.setObjectName("label")
        self.radioButton_UC = QtWidgets.QRadioButton(CNN_Detector_train)
        self.radioButton_UC.setGeometry(QtCore.QRect(52, 234, 89, 21))
        font = QtGui.QFont()
        font.setFamily("Dubai")
        font.setPointSize(12)
        self.radioButton_UC.setFont(font)
        self.radioButton_UC.setChecked(False)
        self.radioButton_UC.setObjectName("radioButton_UC")
        self.lineEdit_CNN_classification_imagetest_image_address = QtWidgets.QLineEdit(CNN_Detector_train)
        self.lineEdit_CNN_classification_imagetest_image_address.setGeometry(QtCore.QRect(250, 740, 351, 21))
        self.lineEdit_CNN_classification_imagetest_image_address.setObjectName("lineEdit_CNN_classification_imagetest_image_address")
        self.label_image_show_2 = QtWidgets.QLabel(CNN_Detector_train)
        self.label_image_show_2.setGeometry(QtCore.QRect(1009, 148, 231, 231))
        self.label_image_show_2.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.label_image_show_2.setText("")
        self.label_image_show_2.setObjectName("label_image_show_2")
        self.label_3 = QtWidgets.QLabel(CNN_Detector_train)
        self.label_3.setGeometry(QtCore.QRect(982, 385, 291, 31))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(10)
        self.label_3.setFont(font)
        self.label_3.setAlignment(QtCore.Qt.AlignCenter)
        self.label_3.setObjectName("label_3")
        self.lineEdit_3 = QtWidgets.QLineEdit(CNN_Detector_train)
        self.lineEdit_3.setGeometry(QtCore.QRect(370, 690, 113, 20))
        self.lineEdit_3.setObjectName("lineEdit_3")
        self.radioButton_FGSC = QtWidgets.QRadioButton(CNN_Detector_train)
        self.radioButton_FGSC.setGeometry(QtCore.QRect(165, 224, 121, 40))
        font = QtGui.QFont()
        font.setFamily("Dubai")
        font.setPointSize(12)
        self.radioButton_FGSC.setFont(font)
        self.radioButton_FGSC.setObjectName("radioButton_FGSC")
        self.radioButton_MSTAR = QtWidgets.QRadioButton(CNN_Detector_train)
        self.radioButton_MSTAR.setGeometry(QtCore.QRect(294, 224, 121, 40))
        font = QtGui.QFont()
        font.setFamily("Dubai")
        font.setPointSize(12)
        self.radioButton_MSTAR.setFont(font)
        self.radioButton_MSTAR.setObjectName("radioButton_MSTAR")
        self.radioButton_FUSAR = QtWidgets.QRadioButton(CNN_Detector_train)
        self.radioButton_FUSAR.setGeometry(QtCore.QRect(418, 225, 131, 40))
        font = QtGui.QFont()
        font.setFamily("Dubai")
        font.setPointSize(12)
        self.radioButton_FUSAR.setFont(font)
        self.radioButton_FUSAR.setObjectName("radioButton_FUSAR")
        self.radioButton_CARS = QtWidgets.QRadioButton(CNN_Detector_train)
        self.radioButton_CARS.setGeometry(QtCore.QRect(574, 226, 151, 41))
        font = QtGui.QFont()
        font.setFamily("Dubai")
        font.setPointSize(12)
        self.radioButton_CARS.setFont(font)
        self.radioButton_CARS.setObjectName("radioButton_CARS")
        self.label_Attack = QtWidgets.QLabel(CNN_Detector_train)
        self.label_Attack.setGeometry(QtCore.QRect(43, 287, 221, 41))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(13)
        self.label_Attack.setFont(font)
        self.label_Attack.setObjectName("label_Attack")
        self.radioButton_BIM = QtWidgets.QRadioButton(CNN_Detector_train)
        self.radioButton_BIM.setGeometry(QtCore.QRect(165, 333, 121, 40))
        font = QtGui.QFont()
        font.setFamily("Dubai")
        font.setPointSize(12)
        self.radioButton_BIM.setFont(font)
        self.radioButton_BIM.setObjectName("radioButton_BIM")
        self.radioButton_DF = QtWidgets.QRadioButton(CNN_Detector_train)
        self.radioButton_DF.setGeometry(QtCore.QRect(290, 333, 121, 40))
        font = QtGui.QFont()
        font.setFamily("Dubai")
        font.setPointSize(12)
        self.radioButton_DF.setFont(font)
        self.radioButton_DF.setObjectName("radioButton_DF")
        self.radioButton_PGD = QtWidgets.QRadioButton(CNN_Detector_train)
        self.radioButton_PGD.setGeometry(QtCore.QRect(53, 333, 121, 40))
        font = QtGui.QFont()
        font.setFamily("Dubai")
        font.setPointSize(12)
        self.radioButton_PGD.setFont(font)
        self.radioButton_PGD.setChecked(False)
        self.radioButton_PGD.setObjectName("radioButton_PGD")
        self.radioButton_CW = QtWidgets.QRadioButton(CNN_Detector_train)
        self.radioButton_CW.setGeometry(QtCore.QRect(416, 333, 121, 40))
        font = QtGui.QFont()
        font.setFamily("Dubai")
        font.setPointSize(12)
        self.radioButton_CW.setFont(font)
        self.radioButton_CW.setObjectName("radioButton_CW")
        self.radioButton_FGSM = QtWidgets.QRadioButton(CNN_Detector_train)
        self.radioButton_FGSM.setGeometry(QtCore.QRect(512, 343, 171, 21))
        font = QtGui.QFont()
        font.setFamily("Dubai")
        font.setPointSize(12)
        self.radioButton_FGSM.setFont(font)
        self.radioButton_FGSM.setChecked(False)
        self.radioButton_FGSM.setObjectName("radioButton_FGSM")
        self.lineEdit_CNN_classification_imagetest_model_address = QtWidgets.QLineEdit(CNN_Detector_train)
        self.lineEdit_CNN_classification_imagetest_model_address.setGeometry(QtCore.QRect(101, 107, 561, 21))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(11)
        self.lineEdit_CNN_classification_imagetest_model_address.setFont(font)
        self.lineEdit_CNN_classification_imagetest_model_address.setStyleSheet("background-color: rgb(243, 243, 243);")
        self.lineEdit_CNN_classification_imagetest_model_address.setAlignment(QtCore.Qt.AlignCenter)
        self.lineEdit_CNN_classification_imagetest_model_address.setObjectName("lineEdit_CNN_classification_imagetest_model_address")
        self.pushButton_CNN_classification_imagetest_model_address = QtWidgets.QPushButton(CNN_Detector_train)
        self.pushButton_CNN_classification_imagetest_model_address.setGeometry(QtCore.QRect(662, 107, 31, 21))
        self.pushButton_CNN_classification_imagetest_model_address.setStyleSheet("background-color: rgb(98, 98, 98);")
        self.pushButton_CNN_classification_imagetest_model_address.setObjectName("pushButton_CNN_classification_imagetest_model_address")
        self.label_2 = QtWidgets.QLabel(CNN_Detector_train)
        self.label_2.setGeometry(QtCore.QRect(44, 55, 141, 41))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(13)
        self.label_2.setFont(font)
        self.label_2.setObjectName("label_2")
        self.label_Attack_2 = QtWidgets.QLabel(CNN_Detector_train)
        self.label_Attack_2.setGeometry(QtCore.QRect(44, 396, 241, 41))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(13)
        self.label_Attack_2.setFont(font)
        self.label_Attack_2.setObjectName("label_Attack_2")
        self.radioButton_FS = QtWidgets.QRadioButton(CNN_Detector_train)
        self.radioButton_FS.setGeometry(QtCore.QRect(52, 447, 181, 45))
        font = QtGui.QFont()
        font.setFamily("Dubai")
        font.setPointSize(12)
        self.radioButton_FS.setFont(font)
        self.radioButton_FS.setChecked(False)
        self.radioButton_FS.setObjectName("radioButton_FS")
        self.radioButton_LID = QtWidgets.QRadioButton(CNN_Detector_train)
        self.radioButton_LID.setGeometry(QtCore.QRect(272, 447, 191, 45))
        font = QtGui.QFont()
        font.setFamily("Dubai")
        font.setPointSize(12)
        self.radioButton_LID.setFont(font)
        self.radioButton_LID.setChecked(False)
        self.radioButton_LID.setObjectName("radioButton_LID")
        self.radioButton_IM = QtWidgets.QRadioButton(CNN_Detector_train)
        self.radioButton_IM.setGeometry(QtCore.QRect(388, 449, 191, 45))
        font = QtGui.QFont()
        font.setFamily("Dubai")
        font.setPointSize(12)
        self.radioButton_IM.setFont(font)
        self.radioButton_IM.setChecked(False)
        self.radioButton_IM.setObjectName("radioButton_IM")
        self.radioButton_LM = QtWidgets.QRadioButton(CNN_Detector_train)
        self.radioButton_LM.setGeometry(QtCore.QRect(541, 449, 211, 45))
        font = QtGui.QFont()
        font.setFamily("Dubai")
        font.setPointSize(12)
        self.radioButton_LM.setFont(font)
        self.radioButton_LM.setChecked(False)
        self.radioButton_LM.setObjectName("radioButton_LM")
        self.lineEdit_3.raise_()
        self.label_Dataset.raise_()
        self.pushButton.raise_()
        self.label_image_show.raise_()
        self.label.raise_()
        self.radioButton_UC.raise_()
        self.lineEdit_CNN_classification_imagetest_image_address.raise_()
        self.training_show.raise_()
        self.label_image_show_2.raise_()
        self.label_3.raise_()

        self.radioButton_FGSC.raise_()
        self.radioButton_MSTAR.raise_()
        self.radioButton_FUSAR.raise_()
        self.radioButton_CARS.raise_()
        self.label_Attack.raise_()

        self.radioButton_BIM.raise_()
        self.radioButton_DF.raise_()
        self.radioButton_PGD.raise_()
        self.radioButton_CW.raise_()
        self.radioButton_FGSM.raise_()
        self.lineEdit_CNN_classification_imagetest_model_address.raise_()
        self.pushButton_CNN_classification_imagetest_model_address.raise_()
        self.label_2.raise_()

        self.label_Attack_2.raise_()
        self.radioButton_FS.raise_()
        self.radioButton_LID.raise_()
        self.radioButton_IM.raise_()
        self.radioButton_LM.raise_()

        btngroup1 = QButtonGroup(CNN_Detector_train)
        btngroup1.addButton(self.radioButton_MSTAR)
        btngroup1.addButton(self.radioButton_FGSC)
        btngroup1.addButton(self.radioButton_CARS)
        btngroup1.addButton(self.radioButton_UC)
        btngroup1.addButton(self.radioButton_FUSAR)

        btngroup2 = QButtonGroup(CNN_Detector_train)
        btngroup2.addButton(self.radioButton_PGD)
        btngroup2.addButton(self.radioButton_BIM)
        btngroup2.addButton(self.radioButton_FGSM)
        btngroup2.addButton(self.radioButton_DF)
        btngroup2.addButton(self.radioButton_CW)

        btngroup3 = QButtonGroup(CNN_Detector_train)
        btngroup3.addButton(self.radioButton_LM)
        btngroup3.addButton(self.radioButton_IM)
        btngroup3.addButton(self.radioButton_LID)
        btngroup3.addButton(self.radioButton_FS)

        self.attack_method = "PGD"
        self.dataset_name = "UC"
        self.classifier = "FS"

        self.retranslateUi(CNN_Detector_train)
        QtCore.QMetaObject.connectSlotsByName(CNN_Detector_train)

    def retranslateUi(self, CNN_Detector_train):
        _translate = QtCore.QCoreApplication.translate
        CNN_Detector_train.setWindowTitle(_translate("CNN_Detector_train", "Reactive Defense Training"))
        CNN_Detector_train.setWindowIcon(QIcon("./1.ico"))
        self.label_Dataset.setText(_translate("CNN_Detector_train", "Dataset with RSIs:"))
        self.pushButton.setText(_translate("CNN_Detector_train", "Start Training"))
        self.label.setText(_translate("CNN_Detector_train", "Feature Extracted from benign data"))
        self.radioButton_UC.setText(_translate("CNN_Detector_train", "  UC"))
        self.label_3.setText(_translate("CNN_Detector_train", "Feature Extracted from adversarial data"))
        self.radioButton_FGSC.setText(_translate("CNN_Detector_train", " FGSC-23"))
        self.radioButton_MSTAR.setText(_translate("CNN_Detector_train", " MSTAR"))
        self.radioButton_FUSAR.setText(_translate("CNN_Detector_train", " FUSAR-Ship"))
        self.radioButton_CARS.setText(_translate("CNN_Detector_train", " AID"))
        self.label_Attack.setText(_translate("CNN_Detector_train", "Attack Methods："))
        self.radioButton_BIM.setText(_translate("CNN_Detector_train", "  FGSM"))
        self.radioButton_DF.setText(_translate("CNN_Detector_train", " DeepFool"))
        self.radioButton_PGD.setText(_translate("CNN_Detector_train", " PGD"))
        self.radioButton_CW.setText(_translate("CNN_Detector_train", " C&W"))
        self.radioButton_FGSM.setText(_translate("CNN_Detector_train", "  HopSkipJump"))
        self.lineEdit_CNN_classification_imagetest_model_address.setText(_translate("CNN_Detector_train", "pkl_save/UC_resnet18.pth"))
        self.pushButton_CNN_classification_imagetest_model_address.setText(_translate("CNN_Detector_train", "…"))
        self.label_2.setText(_translate("CNN_Detector_train", "Model Address:"))
        self.label_Attack_2.setText(_translate("CNN_Detector_train", "Reactive Defense Methods："))
        self.radioButton_FS.setText(_translate("CNN_Detector_train", "Feature Squeezing"))
        self.radioButton_LID.setText(_translate("CNN_Detector_train", "LID"))
        self.radioButton_IM.setText(_translate("CNN_Detector_train", "InputMFS"))
        self.radioButton_LM.setText(_translate("CNN_Detector_train", "LayerMFS"))
        self.radioButton_PGD.setChecked(True)
        self.radioButton_UC.setChecked(True)
        self.radioButton_FS.setChecked(True)

    def caolianjie(self):
        self.radioButton_UC.toggled.connect(self.dataset_select_set_visible)
        self.radioButton_FUSAR.toggled.connect(self.dataset_select_set_visible)
        self.radioButton_CARS.toggled.connect(self.dataset_select_set_visible)
        self.radioButton_FGSC.toggled.connect(self.dataset_select_set_visible)
        self.radioButton_MSTAR.toggled.connect(self.dataset_select_set_visible)

        self.radioButton_PGD.toggled.connect(self.attack_select_set_visible)
        self.radioButton_FGSM.toggled.connect(self.attack_select_set_visible)
        self.radioButton_BIM.toggled.connect(self.attack_select_set_visible)
        self.radioButton_DF.toggled.connect(self.attack_select_set_visible)
        self.radioButton_CW.toggled.connect(self.attack_select_set_visible)

        self.radioButton_FS.toggled.connect(self.classifier_select_set_visible)
        self.radioButton_LID.toggled.connect(self.classifier_select_set_visible)
        self.radioButton_IM.toggled.connect(self.classifier_select_set_visible)
        self.radioButton_LM.toggled.connect(self.classifier_select_set_visible)
        self.pushButton_CNN_classification_imagetest_model_address.clicked.connect(
            self.choose_CNN_dataset_test_model_dir)
        self.pushButton.clicked.connect(self.start)

        self.pushButton.clicked.connect(
            lambda: self.CNN_detect_test(self.attack_method, self.lineEdit_CNN_classification_imagetest_model_address.text(),
                                          self.dataset_name,
                                          self.classifier))

    def dataset_select_set_visible(self):
        if self.radioButton_MSTAR.isChecked():
            self.dataset_name = "MSTAR"
            print(self.dataset_name)
        elif self.radioButton_UC.isChecked():
            self.dataset_name = "UC"
            print(self.dataset_name)
        elif self.radioButton_FGSC.isChecked():
            self.dataset_name = "FGSC"
            print(self.dataset_name)
        elif self.radioButton_FUSAR.isChecked():
            self.dataset_name = "FUSAR"
            print(self.dataset_name)
        elif self.radioButton_CARS.isChecked():
            self.dataset_name = "AID"
            print(self.dataset_name)


    def attack_select_set_visible(self):
        if self.radioButton_PGD.isChecked():
            self.attack_method = "PGD"
            print(self.attack_method)
        elif self.radioButton_BIM.isChecked():
            self.attack_method = "FGSM"
            print(self.attack_method)
        elif self.radioButton_FGSM.isChecked():
            self.attack_method = "HopSkipJump"
            print(self.attack_method)
        elif self.radioButton_DF.isChecked():
            self.attack_method = "Deepfool"
            print(self.attack_method)
        elif self.radioButton_CW.isChecked():
            self.attack_method = "CW"
            print(self.attack_method)

    def classifier_select_set_visible(self):
        if self.radioButton_FS.isChecked():
            self.classifier = "FS"
            print(self.classifier)
        elif self.radioButton_LID.isChecked():
            self.classifier = "LID"
            print(self.classifier)
        elif self.radioButton_IM.isChecked():
            self.classifier = "InputMFS"
            print(self.classifier)
        elif self.radioButton_LM.isChecked():
            self.classifier = "LayerMFS"
            print(self.classifier)

    def start(self):
        self.training_show.setText("Start Training")

    def CNN_detect_test(self, attack_method,model,dataset_name,classifier):
        self.thread_image_test = Thread_CNN_Adv_Detect(attack_method,model,dataset_name,classifier)
        self.thread_image_test.update_datasettest.connect(self.get_CNN_dataset_test_result)
        self.thread_image_test.start()
        self.thread_image_test.exec()

    def choose_CNN_dataset_test_model_dir(self):
        model_dir = QFileDialog.getOpenFileName(None, 'Choose data File', '')
        self.lineEdit_CNN_classification_imagetest_model_address.setText(model_dir[0])

    def get_CNN_dataset_test_result(self,test_result):
        self.training_show.setText(test_result)
        self.training_show.repaint()

        if self.classifier == "InputMFS":
            self.openimage_example(self.label_image_show,"result_image\\feature_show\\InputMFS\\1.jpg")
            self.openimage_example(self.label_image_show_2, "result_image\\feature_show\\InputMFS\\2.jpg")
        elif self.classifier == "LayerMFS":
            self.openimage_example(self.label_image_show, "result_image\\feature_show\LayerMFS\\3.jpg")
            self.openimage_example(self.label_image_show_2, "result_image\\feature_show\LayerMFS\\4.jpg")

    def openimage_example(self,image_show,img_address):
        imgName = img_address
        jpg = QtGui.QPixmap(imgName).scaled(image_show.width(), image_show.height())
        image_show.setPixmap(jpg)

class Thread_CNN_Adv_Detect(QThread):
    update_datasettest = pyqtSignal(str)

    def __init__(self, attack_method, model_address, dataset_name, classifier):
        super().__init__()
        self.out = 'Adversarial Detector Training：' + '\n' + 'RSI Dataset： ' + dataset_name + '\n' + 'Attack Methods： ' + attack_method + '\n' + "Reactive Defense Methods： " + classifier
        self.attack_method, self.model_address, self.dataset_name, self.classifier = attack_method,model_address.replace('\\', '/'), dataset_name, classifier

    def run(self):
        test_result = self.test()
        self.update_datasettest.emit(test_result)

    def get_distance(self, model, dataset, X1):
        X1_pred = model.predict(X1)
        vals_squeezed = []

        X1_seqeezed_bit = bit_depth_py(X1, 5)
        vals_squeezed.append(model.predict(X1_seqeezed_bit))
        X1_seqeezed_filter_median = median_filter_py(X1, 2)
        vals_squeezed.append(model.predict(X1_seqeezed_filter_median))
        X1_seqeezed_filter_local = non_local_means_color_py(X1, 13, 3, 2)
        vals_squeezed.append(model.predict(X1_seqeezed_filter_local))

        dist_array = []
        for val_squeezed in vals_squeezed:
            dist = np.sum(np.abs(X1_pred - val_squeezed), axis=tuple(range(len(X1_pred.shape))[1:]))
            dist_array.append(dist)

        dist_array = np.array(dist_array)
        return np.max(dist_array, axis=0)

    def train_fs(self, model, dataset, X1, train_fpr):
        distances = self.get_distance(model, dataset, X1)
        selected_distance_idx = int(np.ceil(len(X1) * (1 - train_fpr)))
        threshold = sorted(distances)[selected_distance_idx - 1]
        threshold = threshold
        print("Threshold value: %f" % threshold)
        return threshold

    def get_lid(self, model, X_test, X_test_noisy, X_test_adv, k=10, batch_size=100, dataset='UC'):
        print('Extract local intrinsic dimensionality: k = %s' % k)
        lids_normal, lids_noisy, lids_adv = get_lids_random_batch(model, X_test, X_test_noisy, X_test_adv, dataset, k,
                                                                  batch_size)
        print("lids_normal:", lids_normal.shape)
        print("lids_noisy:", lids_noisy.shape)
        print("lids_adv:", lids_adv.shape)

        lids_pos = lids_adv
        lids_neg = np.concatenate((lids_normal, lids_noisy))
        artifacts, labels = merge_and_generate_labels(lids_pos, lids_neg)
        return artifacts, labels

    def test(self):
        since = time.time()
        if self.classifier == "FS":
            dataset = self.dataset_name
            print('Loading the data and model...')
            # Load the model
            if self.dataset_name == "UC":
                from Adv_Detect.baselineCNN.cnn.cnn_uc import UC10CNN as myModel
            model_class = myModel(mode='load', filename=self.model_address)
            model = model_class.model
            sgd = optimizers.SGD(lr=0.01, decay=1e-6, momentum=0.9, nesterov=True)
            model.compile(loss=categorical_crossentropy, optimizer=sgd, metrics=['accuracy'])

            # Load the dataset
            X_test_all = model_class.X_test_all
            Y_test_all = model_class.Y_test_all
            print(X_test_all.shape)
            X_test_all = X_test_all.transpose(0, 2, 3, 1)
            # -----------------------------------------------------------------
            # Evaluate the trained model.
            # Refine the normal and adversarial sets to only include samples for
            # which the original version was correctly classified by the model
            print("Evaluating the pre-trained model...")
            Y_pred_all = model.predict(X_test_all)
            Y_test_all = to_categorical(Y_test_all, 21)
            accuracy_all = calculate_accuracy(Y_pred_all, Y_test_all)
            print('Test accuracy on raw legitimate examples %.4f' % (accuracy_all))
            inds_correct = np.where(Y_pred_all.argmax(axis=1) == Y_test_all.argmax(axis=1))[0]
            X_test = X_test_all[inds_correct]
            Y_test = Y_test_all[inds_correct]
            Y_pred = Y_pred_all[inds_correct]
            indx_train = random.sample(range(len(X_test)), int(len(X_test) / 2))
            indx_test = list(set(range(0, len(X_test))) - set(indx_train))
            print("Number of correctly predict images: %s" % (len(inds_correct)))
            x_train = X_test
            # compute thresold - use test data to compute that
            threshold = self.train_fs(model, dataset, x_train, 0.2)

            file_handle = open("Adv_Detect/Threshold.txt",mode='w')
            file_handle.write(str(threshold) + '\n')
            file_handle.close()
            time_elapsed = time.time() - since
            return ("Time：{}s，\n the threshold value of Feature Squeezing on {} is {}".format(time_elapsed,self.dataset_name,threshold))

        elif self.classifier == "LID":
            dataset = 'UC'
            batch_size = 16
            print('Loading the data and model...')
            if self.dataset_name == "UC":
                from Adv_Detect.baselineCNN.cnn.cnn_uc import UC10CNN as myModel
            model_class = myModel(mode='load', filename=self.model_address)
            model = model_class.model
            sgd = optimizers.SGD(lr=0.01, decay=1e-6, momentum=0.9, nesterov=True)
            model.compile(loss=categorical_crossentropy, optimizer=sgd, metrics=['accuracy'])
            # Load the dataset
            X_test_all = model_class.X_test_all
            Y_test_all = model_class.Y_test_all
            print(X_test_all.shape)
            X_test_all = X_test_all.transpose(0, 2, 3, 1)

            if self.dataset_name == "UC":
                data_transforms = transforms.Compose([transforms.Resize(224),
                                                      transforms.CenterCrop(224),
                                                      transforms.ToTensor(),
                                                      transforms.Normalize((0.44979182, 0.48921227, 0.48212156),
                                                                           (0.19673954, 0.20322968, 0.21901236))
                                                      ])
            if self.attack_method == "FGSM":
                self.attack_method = "UAP"
            data_dir_adv = 'Adv_Fool_Img\\Adversarial Scene Dataset\\UC_adv_fool\\{}'.format(self.attack_method)
            adv_data_gen = datasets.ImageFolder(data_dir_adv, data_transforms)
            adv_data = torch.utils.data.DataLoader(adv_data_gen,
                                                   batch_size=len(adv_data_gen),
                                                   shuffle=False,
                                                   num_workers=0)
            for data_test in adv_data:
                X_test_adv, Y_test_adv = data_test
            X_test_adv = X_test_adv.numpy()
            Y_test_adv = Y_test_adv.numpy()
            X_test_adv = X_test_adv.transpose(0, 2, 3, 1)

            print('Crafting %s noisy samples. ' % dataset)
            X_test_noisy = get_noisy_samples(X_test_all, X_test_adv, dataset, self.attack_method)

            # Refine the normal, noisy and adversarial sets to only include samples for which
            # the original version was correctly classified by the model
            preds_test = model.predict(X_test_all)
            Y_test_all = to_categorical(Y_test_all, 21)
            inds_correct = np.where(preds_test.argmax(axis=1) == Y_test_all.argmax(axis=1))[0]
            print("Number of correctly predict images: %s" % (len(inds_correct)))

            X_test_clean = X_test_all[inds_correct]
            X_test_noisy = X_test_noisy[inds_correct]
            X_test_adv = X_test_adv
            Y_test = Y_test_all[inds_correct]
            print("X_test: ", X_test_clean.shape)
            print("X_test_noisy: ", X_test_noisy.shape)
            print("X_test_adv: ", X_test_adv.shape)

            # extract local intrinsic dimensionality --- load if it existed
            lid_file_X = '{}{}_{}_lid_X.npy'.format(lid_results_dir, dataset, self.attack_method)
            lid_file_Y = '{}{}_{}_lid_Y.npy'.format(lid_results_dir, dataset, self.attack_method)
            if os.path.isfile(lid_file_X) & os.path.isfile(lid_file_Y):
                X = np.load(lid_file_X)
                Y = np.load(lid_file_Y)
            else:
                X, Y = self.get_lid(model, X_test_clean, X_test_noisy, X_test_adv, k_nn[DATASETS.index(dataset)], batch_size,dataset)
                np.save(lid_file_X, X)
                np.save(lid_file_Y, Y)

            scaler = MinMaxScaler().fit(X)
            X = scaler.transform(X)  # standarization
            print("LID: characteristic shape: ", X.shape, ", label shape: ", Y.shape)
            # test attack is the same as training attack
            x_train, y_train, x_test, y_test = block_split(X, Y)
            print("Train data size: ", x_train.shape)
            print("Test data size: ", x_test.shape)

            ## Build detector
            print("LR Detector on [dataset: %s, train_attack: %s, test_attack: %s] with:" % (dataset, self.attack_method, self.attack_method))
            lr = train_lr(x_train, y_train)
            filename = './Adv_Detect/' + self.classifier + '_' + self.attack_method + '_' + self.dataset_name + '.sav'
            pickle.dump(lr, open(filename, 'wb'), protocol=4)
            time_elapsed = time.time() - since
            return ("LR Detector on {}, train_attack: {}, test_attack: {}".format(
                    time_elapsed, self.attack_method, self.attack_method))

        elif self.classifier == 'InputMFS' or self.classifier == "LayerMFS":
            since = time.time()
            if self.classifier == 'InputMFS':
                images = torch.load('D:\Data\Detection_Use_UC\\'  + self.dataset_name + '_images_' + self.attack_method)
                images_advs = torch.load('D:\Data\\Detection_Use_UC\\'  + self.dataset_name + '_images_adv_' + self.attack_method)
            elif self.classifier == "LayerMFS":
                images = torch.load(r'D:\Data\\Detection_Use_UC\\' + self.dataset_name + '_images_' + self.attack_method+"_L")
                images_advs = torch.load(r'D:\Data\\Detection_Use_UC\\' + self.dataset_name + '_images_adv_' + self.attack_method+"_L")
            print(len(images))
            print(len(images_advs))
            print(images[0].shape)
            print(images_advs[0].shape)
            print('Loading model...')

            model = torch.load(self.model_address)
            model = model.eval()
            device = torch.device("cuda:0" if torch.cuda.is_available() else "cpu")
            model = model.to(device)

            model_features = model.features
            number_images = len(images)

            # get a list of all feature maps of all layers
            def get_layer_feature_maps(X, layers):
                X_l = []
                for i in range(len(model_features)):
                    X = model_features[i](X)
                    if i in layers:
                        Xc = torch.Tensor(X.cpu())
                        X_l.append(Xc.cuda())
                return X_l

            def cifar_normalize(images):
                if self.dataset_name == 'UC':
                    images[:, 0, :, :] = (images[:, 0, :, :] - 0.482396) / 0.4678
                    images[:, 1, :, :] = (images[:, 1, :, :] - 0.489491) / 0.4505
                    images[:, 2, :, :] = (images[:, 2, :, :] - 0.450041) / 0.4433
                return images

            # indice of activation layers
            act_layers = [2, 5, 9, 12, 16, 19, 22, 26, 29, 32, 36, 39, 42]
            fourier_act_layers = [9, 16, 22, 29, 36, 42]

            def calculate_fourier_spectrum(im, typ='MFS'):
                im = im.float()
                im = im.cpu()
                im = im.data.numpy()  # transorm to numpy
                fft = np.fft.fft2(im)
                if typ == 'MFS':
                    fourier_spectrum = np.abs(fft)
                elif typ == 'PFS':
                    fourier_spectrum = np.abs(np.angle(fft))
                return fourier_spectrum

            def calculate_spectra(images, typ='MFS'):
                fs = []
                for i in range(len(images)):
                    image = images[i]
                    fourier_image = calculate_fourier_spectrum(image, typ=typ)
                    fs.append(fourier_image.flatten())
                return fs

            ###Fourier Input

            print('Extracting ' + self.classifier + ' characteristic...')
            if self.classifier == 'InputMFS':
                mfs = calculate_spectra(images)
                mfs_advs = calculate_spectra(images_advs)

                characteristics = np.asarray(mfs, dtype=np.float32)
                characteristics_adv = np.asarray(mfs_advs, dtype=np.float32)

            ###Fourier Layer
            elif self.classifier == 'LayerMFS':

                mfs = []
                mfs_advs = []
                layers = fourier_act_layers
                for i in tqdm(range(number_images)):
                    image = images[i].unsqueeze_(0)
                    adv = images_advs[i].unsqueeze_(0)
                    image = cifar_normalize(image)
                    adv = cifar_normalize(adv)
                    image_feature_maps = get_layer_feature_maps(image, layers)
                    adv_feature_maps = get_layer_feature_maps(adv, layers)
                    fourier_maps = calculate_spectra(image_feature_maps)
                    fourier_maps_adv = calculate_spectra(adv_feature_maps)
                    mfs.append(np.hstack(fourier_maps))
                    mfs_advs.append(np.hstack(fourier_maps_adv))

                characteristics = np.asarray(mfs, dtype=np.float32)
                characteristics_adv = np.asarray(mfs_advs, dtype=np.float32)

            np.save('characteristics\\' + self.dataset_name + '_' + self.attack_method + '_' + self.classifier,characteristics)
            np.save('characteristics\\' + self.dataset_name + '_' + self.attack_method + '_' + self.classifier + '_adv',characteristics_adv)
            print('Done extracting and saving characteristics!')

            characteristics = np.load(
                'characteristics\\' + self.dataset_name + '_' + self.attack_method + '_' + self.classifier + '.npy',
                allow_pickle=True)
            characteristics_adv = np.load(
                'Data\\characteristics\\' + self.dataset_name + '_' + self.attack_method + '_' + self.classifier + '_adv.npy',
                allow_pickle=True)

            shape = np.shape(characteristics)
            k = shape[0]

            adv_X_train_val, adv_X_test, adv_y_train_val, adv_y_test = train_test_split(characteristics_adv, np.ones(k),
                                                                                        test_size=0.1, random_state=42)
            b_X_train_val, b_X_test, b_y_train_val, b_y_test = train_test_split(characteristics, np.zeros(k),
                                                                                test_size=0.1, random_state=42)
            adv_X_train, adv_X_val, adv_y_train, adv_y_val = train_test_split(adv_X_train_val, adv_y_train_val,
                                                                              test_size=0.1, random_state=42)
            b_X_train, b_X_val, b_y_train, b_y_val = train_test_split(b_X_train_val, b_y_train_val, test_size=0.1,
                                                                      random_state=42)

            X_train = np.concatenate((b_X_train, adv_X_train))
            y_train = np.concatenate((b_y_train, adv_y_train))

            # train classifier
            print('Training classifier...')
            clf = LogisticRegression()
            clf.fit(X_train, y_train)

            filename = './Data/'+'Detectors_MFS/' + self.classifier + '_' + self.attack_method + '_' + self.dataset_name + '.sav'
            pickle.dump(clf, open(filename, 'wb'), protocol=4)
            time_elapsed = time.time() - since

            self.out = self.out  + 'Time：' + str(time_elapsed) + ' s' + '\n' + "Address saved at：" + \
                       './Data/' + self.classifier + '_' + self.attack_method + '_' + self.dataset_name + '.sav' + '\n' \
                       + "Done!"

            out = self.out
            print(out)

            return out





if __name__ == "__main__":
    import sys

    app = QtWidgets.QApplication(sys.argv)
    interface = QtWidgets.QDialog()
    ui = Ui_CNN_Detector_train()
    ui.setupUi(interface)
    ui.caolianjie()
    interface.show()
    sys.exit(app.exec_())
