# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'ui_multisource_adv_classification.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtGui import QIcon
from PyQt5.Qt import QApplication, QWidget, QPushButton,QThread,QMutex,QButtonGroup
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.Qt import pyqtSignal
from PyQt5.QtCore import QUrl
import matplotlib.pyplot as plt
from PyQt5.QtWidgets import QFileDialog
import numpy as np
import torch
from torch.autograd import Variable
from torch.utils.data import TensorDataset,DataLoader
import matplotlib.pyplot as plt
plt.switch_backend('TKAgg')
from tqdm import trange,tqdm
from torchvision.utils import save_image
import matplotlib as mpl
device=torch.device('cuda:0' if torch.cuda.is_available() else 'cpu')
mpl.rcParams["font.sans-serif"] = ["SimHei"]
mpl.rcParams["axes.unicode_minus"] = False


class Ui_multisource_adv_classification(object):
    def setupUi(self, ui_multisource_adv_classification):
        ui_multisource_adv_classification.setObjectName("ui_multisource_adv_classification")
        ui_multisource_adv_classification.resize(1187, 657)
        ui_multisource_adv_classification.setStyleSheet("background-color: rgb(246, 250, 255);")
        self.label_3 = QtWidgets.QLabel(ui_multisource_adv_classification)
        self.label_3.setGeometry(QtCore.QRect(949, 330, 199, 31))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(13)
        self.label_3.setFont(font)
        self.label_3.setAlignment(QtCore.Qt.AlignCenter)
        self.label_3.setObjectName("label_3")
        self.lineEdit_CNN_classification_imagetest_image_address = QtWidgets.QLineEdit(ui_multisource_adv_classification)
        self.lineEdit_CNN_classification_imagetest_image_address.setGeometry(QtCore.QRect(270, 505, 351, 21))
        self.lineEdit_CNN_classification_imagetest_image_address.setObjectName("lineEdit_CNN_classification_imagetest_image_address")
        self.training_show = QtWidgets.QLabel(ui_multisource_adv_classification)
        self.training_show.setGeometry(QtCore.QRect(10, 480, 1171, 171))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(12)
        self.training_show.setFont(font)
        self.training_show.setStyleSheet("background-color: rgb(127, 130, 136);\n"
"")
        self.training_show.setFrameShadow(QtWidgets.QFrame.Raised)
        self.training_show.setLineWidth(3)
        self.training_show.setText("")
        self.training_show.setScaledContents(False)
        self.training_show.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignTop)
        self.training_show.setObjectName("training_show")
        self.label_2 = QtWidgets.QLabel(ui_multisource_adv_classification)
        self.label_2.setGeometry(QtCore.QRect(43, 50, 221, 41))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(13)
        self.label_2.setFont(font)
        self.label_2.setObjectName("label_2")
        self.frame = QtWidgets.QFrame(ui_multisource_adv_classification)
        self.frame.setGeometry(QtCore.QRect(70, 330, 601, 41))
        self.frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame.setObjectName("frame")
        self.radioButton_fgsm = QtWidgets.QRadioButton(self.frame)
        self.radioButton_fgsm.setGeometry(QtCore.QRect(350, 10, 89, 20))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(13)
        self.radioButton_fgsm.setFont(font)
        self.radioButton_fgsm.setObjectName("radioButton_fgsm")
        self.radioButton_pgd = QtWidgets.QRadioButton(self.frame)
        self.radioButton_pgd.setGeometry(QtCore.QRect(40, 10, 89, 20))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(13)
        self.radioButton_pgd.setFont(font)
        self.radioButton_pgd.setChecked(True)
        self.radioButton_pgd.setObjectName("radioButton_pgd")
        self.radioButton_cw = QtWidgets.QRadioButton(self.frame)
        self.radioButton_cw.setGeometry(QtCore.QRect(480, 10, 89, 16))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(13)
        self.radioButton_cw.setFont(font)
        self.radioButton_cw.setChecked(False)
        self.radioButton_cw.setObjectName("radioButton_cw")
        self.radioButton_threhold = QtWidgets.QRadioButton(self.frame)
        self.radioButton_threhold.setGeometry(QtCore.QRect(180, 10, 131, 16))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(13)
        self.radioButton_threhold.setFont(font)
        self.radioButton_threhold.setObjectName("radioButton_threhold")
        self.label_image_show_2 = QtWidgets.QLabel(ui_multisource_adv_classification)
        self.label_image_show_2.setGeometry(QtCore.QRect(956, 111, 201, 211))
        self.label_image_show_2.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.label_image_show_2.setText("")
        self.label_image_show_2.setObjectName("label_image_show_2")
        self.radioButton_so2sat = QtWidgets.QRadioButton(ui_multisource_adv_classification)
        self.radioButton_so2sat.setGeometry(QtCore.QRect(100, 215, 89, 21))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(13)
        self.radioButton_so2sat.setFont(font)
        self.radioButton_so2sat.setChecked(True)
        self.radioButton_so2sat.setObjectName("radioButton_so2sat")
        self.label_image_show = QtWidgets.QLabel(ui_multisource_adv_classification)
        self.label_image_show.setGeometry(QtCore.QRect(715, 112, 211, 211))
        self.label_image_show.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.label_image_show.setText("")
        self.label_image_show.setObjectName("label_image_show")
        self.label_image_show_3 = QtWidgets.QLabel(ui_multisource_adv_classification)
        self.label_image_show_3.setGeometry(QtCore.QRect(1190, 30, 611, 531))
        self.label_image_show_3.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.label_image_show_3.setText("")
        self.label_image_show_3.setObjectName("label_image_show_3")
        self.label = QtWidgets.QLabel(ui_multisource_adv_classification)
        self.label.setGeometry(QtCore.QRect(738, 331, 171, 31))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(13)
        self.label.setFont(font)
        self.label.setAlignment(QtCore.Qt.AlignCenter)
        self.label.setObjectName("label")
        self.label_4 = QtWidgets.QLabel(ui_multisource_adv_classification)
        self.label_4.setGeometry(QtCore.QRect(44, 270, 161, 41))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(13)
        self.label_4.setFont(font)
        self.label_4.setObjectName("label_4")
        self.label_7 = QtWidgets.QLabel(ui_multisource_adv_classification)
        self.label_7.setGeometry(QtCore.QRect(1440, 580, 161, 31))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(14)
        font.setBold(True)
        font.setWeight(75)
        self.label_7.setFont(font)
        self.label_7.setAlignment(QtCore.Qt.AlignCenter)
        self.label_7.setObjectName("label_7")
        self.pushButton_CNN_classification_imagetest_model_address = QtWidgets.QPushButton(ui_multisource_adv_classification)
        self.pushButton_CNN_classification_imagetest_model_address.setGeometry(QtCore.QRect(630, 104, 31, 21))
        self.pushButton_CNN_classification_imagetest_model_address.setStyleSheet("background-color: rgb(98, 98, 98);")
        self.pushButton_CNN_classification_imagetest_model_address.setObjectName("pushButton_CNN_classification_imagetest_model_address")
        self.pushButton = QtWidgets.QPushButton(ui_multisource_adv_classification)
        self.pushButton.setGeometry(QtCore.QRect(280, 420, 181, 31))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(14)
        self.pushButton.setFont(font)
        self.pushButton.setObjectName("pushButton")
        self.label_21 = QtWidgets.QLabel(ui_multisource_adv_classification)
        self.label_21.setGeometry(QtCore.QRect(42, 140, 211, 41))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(13)
        self.label_21.setFont(font)
        self.label_21.setObjectName("label_21")
        self.lineEdit_CNN_classification_imagetest_model_address = QtWidgets.QLineEdit(ui_multisource_adv_classification)
        self.lineEdit_CNN_classification_imagetest_model_address.setGeometry(QtCore.QRect(100, 104, 531, 21))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(11)
        self.lineEdit_CNN_classification_imagetest_model_address.setFont(font)
        self.lineEdit_CNN_classification_imagetest_model_address.setStyleSheet("background-color: rgb(243, 243, 243);")
        self.lineEdit_CNN_classification_imagetest_model_address.setAlignment(QtCore.Qt.AlignCenter)
        self.lineEdit_CNN_classification_imagetest_model_address.setObjectName("lineEdit_CNN_classification_imagetest_model_address")

        self.retranslateUi(ui_multisource_adv_classification)
        QtCore.QMetaObject.connectSlotsByName(ui_multisource_adv_classification)

        self.attack_name = 'pgd'
        self.data_dir = "Data\\so2sat\\10608rgb5_pgd.npy"

    def retranslateUi(self, ui_multisource_adv_classification):
        _translate = QtCore.QCoreApplication.translate
        ui_multisource_adv_classification.setWindowIcon(QIcon("./1.ico"))
        ui_multisource_adv_classification.setWindowTitle(_translate("ui_multisource_adv_classification", "Recognition with Multi-Source Data"))
        self.label_3.setText(_translate("ui_multisource_adv_classification", "Adversarial Examples"))
        self.label_2.setText(_translate("ui_multisource_adv_classification", "Model Address:"))
        self.radioButton_fgsm.setText(_translate("ui_multisource_adv_classification", "FGSM"))
        self.radioButton_pgd.setText(_translate("ui_multisource_adv_classification", " PGD"))
        self.radioButton_cw.setText(_translate("ui_multisource_adv_classification", "  C&W"))
        self.radioButton_threhold.setText(_translate("ui_multisource_adv_classification", " Threshold"))
        self.radioButton_so2sat.setText(_translate("ui_multisource_adv_classification", "So2Sat"))
        self.label.setText(_translate("ui_multisource_adv_classification", "Benign Examples"))
        self.label_4.setText(_translate("ui_multisource_adv_classification", "Attack Methods："))
        self.label_7.setText(_translate("ui_multisource_adv_classification", "Confusion Matrix"))
        self.pushButton_CNN_classification_imagetest_model_address.setText(_translate("ui_multisource_adv_classification", "…"))
        self.pushButton.setText(_translate("ui_multisource_adv_classification", "Recognize"))
        self.label_21.setText(_translate("ui_multisource_adv_classification", "Data Selection："))
        self.lineEdit_CNN_classification_imagetest_model_address.setText(_translate("ui_multisource_adv_classification", "pths\\so2sat_opt_ResNet18.pth"))

    def caolianjie(self):
        self.radioButton_pgd.toggled.connect(self.dataset_attack_select_set_visible)
        self.radioButton_threhold.toggled.connect(self.dataset_attack_select_set_visible)
        self.radioButton_cw.toggled.connect(self.dataset_attack_select_set_visible)
        self.radioButton_fgsm.toggled.connect(self.dataset_attack_select_set_visible)
        self.pushButton_CNN_classification_imagetest_model_address.clicked.connect(self.choose_CNN_dataset_test_model_dir)
        self.pushButton.clicked.connect(self.clear_all)
        self.pushButton.clicked.connect(
            lambda: self.CNN_dataset_test(self.lineEdit_CNN_classification_imagetest_model_address.text(),self.data_dir))
    def dataset_attack_select_set_visible(self):

        if self.radioButton_pgd.isChecked():
            self.attack_name = 'pgd'
            self.data_dir = "Data\\so2sat\\10608rgb5_pgd.npy"
        elif self.radioButton_threhold.isChecked():
            self.attack_name = 'threhold'
            self.data_dir = "Data\\so2sat\\10608rgb5_threhold.npy"
        elif self.radioButton_cw.isChecked():
            self.attack_name = 'cw'
            self.data_dir = "Data\\so2sat\\10608rgb5_cw.npy"
        elif self.radioButton_fgsm.isChecked():
            self.attack_name = 'fgsm'
            self.data_dir = "Data\\so2sat\\10608rgb5_fgsm.npy"

    def choose_CNN_dataset_test_model_dir(self):
        model_dir = QFileDialog.getOpenFileName(None, 'Choose data File', '')
        self.lineEdit_CNN_classification_imagetest_model_address.setText(model_dir[0])
    def clear_all(self):
        self.training_show.setText('')
        self.label_image_show.setPixmap(QtGui.QPixmap(""))
        self.label_image_show.repaint()

    def CNN_dataset_test(self, model_address,  dataset_name):
        print("eee")
        self.thread_image_test = Thread_CNN_adv_dataset_test(dataset_name, model_address)
        self.thread_image_test.update_datasettest.connect(self.get_CNN_dataset_test_result)
        self.thread_image_test.start()
        self.thread_image_test.exec()
    def get_CNN_dataset_test_result(self, test_result):

        self.training_show.setText('Accuracy in adversarial data: {}% \n Accuracy in Benign Data: {}%\n Accuracy of Average Data: {}%'.format(test_result[0]*100,test_result[3]*100,(test_result[0]+test_result[3])*50))
        self.training_show.repaint()

        ori_image = test_result[1]
        adv_image = test_result[2]
        save_image(torch.from_numpy(ori_image), 'result_image/original_image.jpg')
        self.openimage_ori('result_image/original_image.jpg')
        save_image(torch.from_numpy(adv_image), 'result_image/adv_image.jpg')
        self.openimage_adv('result_image/adv_image.jpg')
    def openimage_ori(self,imgName):
        imgName = imgName.replace('\\', '/')
        jpg = QtGui.QPixmap(imgName).scaled(self.label_image_show_2.width(), self.label_image_show_2.height())
        # jpg = QtGui.QPixmap(imgName)
        self.label_image_show.setPixmap(jpg)
    def openimage_adv(self,imgName):
        imgName = imgName.replace('\\', '/')
        jpg = QtGui.QPixmap(imgName).scaled(self.label_image_show_2.width(), self.label_image_show_2.height())
        # jpg = QtGui.QPixmap(imgName)
        self.label_image_show_2.setPixmap(jpg)

class Thread_CNN_adv_dataset_test(QThread):
    update_datasettest = pyqtSignal(dict)

    def __init__(self, dataset_test_address, model_address):
        super().__init__()
        self.dataset_test_address, self.model_address=dataset_test_address, model_address
    def run(self):
        test_result = self.test()
        self.update_datasettest.emit(test_result)

    def test(self):
        x_test = np.load('Data\\so2sat\\10608rgb5.npy')
        x_test = np.transpose(x_test, (0, 3, 1, 2))
        x_test_example = x_test[3]*5
        print(x_test_example)
        print(x_test_example.max(),x_test_example.min())
        x_test_adv = np.load(self.dataset_test_address)
        x_test_adv_example = x_test_adv[3]*5
        print(x_test_adv_example)
        print(x_test_adv_example.max(),x_test_adv_example.min())
        y_test = np.load('Data\\so2sat\\10607testlab0-5.npy')
        x_test_adv = torch.from_numpy(x_test_adv)
        model = torch.load(self.model_address)
        y_test = torch.from_numpy(y_test)
        val_opt_adv_ids = TensorDataset(x_test_adv, y_test)
        val_loader_opt_adv = DataLoader(dataset=val_opt_adv_ids, batch_size=1024, shuffle=False)
        cor = self.predict(model, val_loader_opt_adv)

        x_test = torch.from_numpy(x_test)
        val_opt_ids = TensorDataset(x_test, y_test)
        val_loader_opt = DataLoader(dataset=val_opt_ids, batch_size=1024, shuffle=False)
        cor0 = self.predict(model, val_loader_opt)
        return {0:cor,1:x_test_adv_example,2:x_test_adv_example,3:cor0}
    def predict(self,model, dataloders, dataset_sizes=10607):
        model.eval()
        running_corrects = 0.0

        # Iterate over data.
        preds_all = np.zeros(dataset_sizes)
        labels_all = np.zeros(dataset_sizes)
        i = 0
        for data in tqdm(dataloders):
            # get the inputs
            inputs, labels = data
            # wrap them in Variable
            inputs = Variable(inputs.to(torch.float32).to(device))
            labels = Variable(labels.to(device))
            outputs = model(inputs)
            _, preds = torch.max(outputs.data, 1)
            running_corrects += torch.sum(preds == labels.data).to(torch.float32)
            i += 1
        correct = running_corrects / dataset_sizes
        return  correct

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    train = QtWidgets.QDialog()
    ui = Ui_multisource_adv_classification()
    ui.setupUi(train)
    ui.caolianjie()
    train.show()
    sys.exit(app.exec_())