# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'CNN_train_multisource.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

from PyQt5.QtGui import QIcon
import pyttsx3
from PyQt5.Qt import QApplication, QWidget, QPushButton,QThread,QMutex
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.Qt import pyqtSignal
from PyQt5.QtCore import QUrl

from PyQt5.QtWidgets import QFileDialog
import numpy as np
import data
import model
import time
import joblib
import torch
import torch.nn.functional as F
import torch.nn as nn
import torch.optim as optim
from torch.autograd import Variable
import torchvision
from torchvision import datasets, models, transforms
import os
import scipy.misc as im
from sklearn.metrics import confusion_matrix
import matplotlib
from tqdm import trange,tqdm
from torch.optim import lr_scheduler
matplotlib.use('TKAgg')
import matplotlib.pyplot as plt
from openpyxl import load_workbook
import matplotlib as mpl
from torch.utils.data import TensorDataset,DataLoader
device=torch.device('cuda:0' if torch.cuda.is_available() else 'cpu')
mpl.rcParams["font.sans-serif"] = ["SimHei"]
mpl.rcParams["axes.unicode_minus"] = False


class Ui_Form_CNN_train_multisource(object):
    def setupUi(self, Form_CNN_train_multisource):
        Form_CNN_train_multisource.setObjectName("Form_CNN_train_multisource")
        Form_CNN_train_multisource.resize(1668, 731)
        self.radioButton_resnet = QtWidgets.QRadioButton(Form_CNN_train_multisource)
        self.radioButton_resnet.setGeometry(QtCore.QRect(120, 55, 115, 31))
        self.radioButton_resnet.setChecked(True)
        self.radioButton_resnet.setObjectName("radioButton_resnet")
        self.lineEdit_gamma = QtWidgets.QLineEdit(Form_CNN_train_multisource)
        self.lineEdit_gamma.setGeometry(QtCore.QRect(860, 210, 61, 21))
        self.lineEdit_gamma.setStyleSheet("background-color: rgb(243, 243, 243);")
        self.lineEdit_gamma.setAlignment(QtCore.Qt.AlignCenter)
        self.lineEdit_gamma.setObjectName("lineEdit_gamma")
        self.pushButton_8 = QtWidgets.QPushButton(Form_CNN_train_multisource)
        self.pushButton_8.setGeometry(QtCore.QRect(450, 490, 101, 28))
        self.pushButton_8.setObjectName("pushButton_8")
        self.checkBox_shuffle = QtWidgets.QCheckBox(Form_CNN_train_multisource)
        self.checkBox_shuffle.setGeometry(QtCore.QRect(860, 450, 91, 21))
        self.checkBox_shuffle.setChecked(True)
        self.checkBox_shuffle.setObjectName("checkBox_shuffle")
        self.checkBox_randomverticalflip = QtWidgets.QCheckBox(Form_CNN_train_multisource)
        self.checkBox_randomverticalflip.setGeometry(QtCore.QRect(440, 450, 191, 21))
        self.checkBox_randomverticalflip.setObjectName("checkBox_randomverticalflip")
        self.radioButton_inception = QtWidgets.QRadioButton(Form_CNN_train_multisource)
        self.radioButton_inception.setGeometry(QtCore.QRect(800, 60, 115, 31))
        self.radioButton_inception.setObjectName("radioButton_inception")
        self.radioButton_alexnet = QtWidgets.QRadioButton(Form_CNN_train_multisource)
        self.radioButton_alexnet.setGeometry(QtCore.QRect(630, 60, 115, 31))
        self.radioButton_alexnet.setObjectName("radioButton_alexnet")
        self.lineEdit_resize = QtWidgets.QLineEdit(Form_CNN_train_multisource)
        self.lineEdit_resize.setGeometry(QtCore.QRect(180, 450, 61, 21))
        self.lineEdit_resize.setStyleSheet("background-color: rgb(243, 243, 243);")
        self.lineEdit_resize.setAlignment(QtCore.Qt.AlignCenter)
        self.lineEdit_resize.setObjectName("lineEdit_resize")
        self.label_67 = QtWidgets.QLabel(Form_CNN_train_multisource)
        self.label_67.setGeometry(QtCore.QRect(450, 210, 101, 21))
        font = QtGui.QFont()
        font.setPointSize(9)
        self.label_67.setFont(font)
        self.label_67.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.label_67.setObjectName("label_67")
        self.label_60 = QtWidgets.QLabel(Form_CNN_train_multisource)
        self.label_60.setGeometry(QtCore.QRect(260, 450, 91, 21))
        font = QtGui.QFont()
        font.setPointSize(9)
        self.label_60.setFont(font)
        self.label_60.setObjectName("label_60")
        self.radioButton_squeezenet = QtWidgets.QRadioButton(Form_CNN_train_multisource)
        self.radioButton_squeezenet.setGeometry(QtCore.QRect(460, 80, 161, 41))
        self.radioButton_squeezenet.setObjectName("radioButton_squeezenet")
        self.checkBox_pretrained = QtWidgets.QCheckBox(Form_CNN_train_multisource)
        self.checkBox_pretrained.setGeometry(QtCore.QRect(130, 290, 151, 21))
        self.checkBox_pretrained.setObjectName("checkBox_pretrained")
        self.lineEdit_batch_size = QtWidgets.QLineEdit(Form_CNN_train_multisource)
        self.lineEdit_batch_size.setGeometry(QtCore.QRect(220, 210, 71, 21))
        self.lineEdit_batch_size.setStyleSheet("background-color: rgb(243, 243, 243);")
        self.lineEdit_batch_size.setAlignment(QtCore.Qt.AlignCenter)
        self.lineEdit_batch_size.setObjectName("lineEdit_batch_size")
        self.label_145 = QtWidgets.QLabel(Form_CNN_train_multisource)
        self.label_145.setGeometry(QtCore.QRect(130, 250, 81, 21))
        font = QtGui.QFont()
        font.setPointSize(9)
        self.label_145.setFont(font)
        self.label_145.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.label_145.setObjectName("label_145")
        self.comboBox_optim = QtWidgets.QComboBox(Form_CNN_train_multisource)
        self.comboBox_optim.setGeometry(QtCore.QRect(220, 250, 71, 22))
        self.comboBox_optim.setObjectName("comboBox_optim")
        self.comboBox_optim.addItem("")
        self.comboBox_optim.addItem("")
        self.comboBox_optim.addItem("")
        self.label_63 = QtWidgets.QLabel(Form_CNN_train_multisource)
        self.label_63.setGeometry(QtCore.QRect(310, 210, 71, 21))
        font = QtGui.QFont()
        font.setPointSize(9)
        self.label_63.setFont(font)
        self.label_63.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.label_63.setObjectName("label_63")
        self.radioButton_mobilenet = QtWidgets.QRadioButton(Form_CNN_train_multisource)
        self.radioButton_mobilenet.setGeometry(QtCore.QRect(290, 80, 86, 41))
        self.radioButton_mobilenet.setObjectName("radioButton_mobilenet")
        self.label_57 = QtWidgets.QLabel(Form_CNN_train_multisource)
        self.label_57.setGeometry(QtCore.QRect(60, 10, 231, 41))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(12)
        self.label_57.setFont(font)
        self.label_57.setObjectName("label_57")
        self.label_64 = QtWidgets.QLabel(Form_CNN_train_multisource)
        self.label_64.setGeometry(QtCore.QRect(630, 210, 91, 21))
        font = QtGui.QFont()
        font.setPointSize(9)
        self.label_64.setFont(font)
        self.label_64.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.label_64.setObjectName("label_64")
        self.label_62 = QtWidgets.QLabel(Form_CNN_train_multisource)
        self.label_62.setGeometry(QtCore.QRect(130, 210, 91, 21))
        font = QtGui.QFont()
        font.setPointSize(9)
        self.label_62.setFont(font)
        self.label_62.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.label_62.setObjectName("label_62")
        self.radioButton_shufflenet = QtWidgets.QRadioButton(Form_CNN_train_multisource)
        self.radioButton_shufflenet.setGeometry(QtCore.QRect(120, 85, 151, 31))
        self.radioButton_shufflenet.setObjectName("radioButton_shufflenet")
        self.label_61 = QtWidgets.QLabel(Form_CNN_train_multisource)
        self.label_61.setGeometry(QtCore.QRect(60, 400, 191, 41))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(12)
        self.label_61.setFont(font)
        self.label_61.setObjectName("label_61")
        self.checkBox_randomhorizontalflip = QtWidgets.QCheckBox(Form_CNN_train_multisource)
        self.checkBox_randomhorizontalflip.setGeometry(QtCore.QRect(640, 450, 211, 21))
        self.checkBox_randomhorizontalflip.setObjectName("checkBox_randomhorizontalflip")
        self.label_image_show_2 = QtWidgets.QLabel(Form_CNN_train_multisource)
        self.label_image_show_2.setGeometry(QtCore.QRect(1050, 40, 591, 591))
        self.label_image_show_2.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.label_image_show_2.setText("")
        self.label_image_show_2.setObjectName("label_image_show_2")
        self.lineEdit_centercrop = QtWidgets.QLineEdit(Form_CNN_train_multisource)
        self.lineEdit_centercrop.setGeometry(QtCore.QRect(360, 450, 61, 21))
        self.lineEdit_centercrop.setStyleSheet("background-color: rgb(243, 243, 243);")
        self.lineEdit_centercrop.setAlignment(QtCore.Qt.AlignCenter)
        self.lineEdit_centercrop.setObjectName("lineEdit_centercrop")
        self.stackedWidget_train_classifier = QtWidgets.QStackedWidget(Form_CNN_train_multisource)
        self.stackedWidget_train_classifier.setGeometry(QtCore.QRect(90, 130, 851, 21))
        self.stackedWidget_train_classifier.setObjectName("stackedWidget_train_classifier")
        self.page = QtWidgets.QWidget()
        self.page.setObjectName("page")
        self.radioButton_resnet18 = QtWidgets.QRadioButton(self.page)
        self.radioButton_resnet18.setGeometry(QtCore.QRect(30, -10, 115, 41))
        self.radioButton_resnet18.setChecked(True)
        self.radioButton_resnet18.setObjectName("radioButton_resnet18")
        self.radioButton_resnet34 = QtWidgets.QRadioButton(self.page)
        self.radioButton_resnet34.setGeometry(QtCore.QRect(200, -10, 115, 41))
        self.radioButton_resnet34.setChecked(False)
        self.radioButton_resnet34.setObjectName("radioButton_resnet34")
        self.radioButton_resnet50 = QtWidgets.QRadioButton(self.page)
        self.radioButton_resnet50.setGeometry(QtCore.QRect(370, -10, 115, 41))
        self.radioButton_resnet50.setChecked(False)
        self.radioButton_resnet50.setObjectName("radioButton_resnet50")
        self.radioButton_resnet101 = QtWidgets.QRadioButton(self.page)
        self.radioButton_resnet101.setGeometry(QtCore.QRect(540, -10, 115, 41))
        self.radioButton_resnet101.setChecked(False)
        self.radioButton_resnet101.setObjectName("radioButton_resnet101")
        self.radioButton_resnet152 = QtWidgets.QRadioButton(self.page)
        self.radioButton_resnet152.setGeometry(QtCore.QRect(710, -10, 115, 41))
        self.radioButton_resnet152.setChecked(False)
        self.radioButton_resnet152.setObjectName("radioButton_resnet152")
        self.stackedWidget_train_classifier.addWidget(self.page)
        self.page_2 = QtWidgets.QWidget()
        self.page_2.setObjectName("page_2")
        self.radioButton_vgg11 = QtWidgets.QRadioButton(self.page_2)
        self.radioButton_vgg11.setGeometry(QtCore.QRect(30, -10, 115, 41))
        self.radioButton_vgg11.setChecked(True)
        self.radioButton_vgg11.setObjectName("radioButton_vgg11")
        self.radioButton_vgg13 = QtWidgets.QRadioButton(self.page_2)
        self.radioButton_vgg13.setGeometry(QtCore.QRect(200, -10, 115, 41))
        self.radioButton_vgg13.setObjectName("radioButton_vgg13")
        self.radioButton_vgg16 = QtWidgets.QRadioButton(self.page_2)
        self.radioButton_vgg16.setGeometry(QtCore.QRect(370, -10, 115, 41))
        self.radioButton_vgg16.setObjectName("radioButton_vgg16")
        self.radioButton_vgg19 = QtWidgets.QRadioButton(self.page_2)
        self.radioButton_vgg19.setGeometry(QtCore.QRect(540, -10, 115, 41))
        self.radioButton_vgg19.setObjectName("radioButton_vgg19")
        self.stackedWidget_train_classifier.addWidget(self.page_2)
        self.page_3 = QtWidgets.QWidget()
        self.page_3.setObjectName("page_3")
        self.radioButton_densenet121 = QtWidgets.QRadioButton(self.page_3)
        self.radioButton_densenet121.setGeometry(QtCore.QRect(30, -10, 151, 41))
        self.radioButton_densenet121.setChecked(True)
        self.radioButton_densenet121.setObjectName("radioButton_densenet121")
        self.radioButton_densenet161 = QtWidgets.QRadioButton(self.page_3)
        self.radioButton_densenet161.setGeometry(QtCore.QRect(200, -10, 151, 41))
        self.radioButton_densenet161.setObjectName("radioButton_densenet161")
        self.radioButton_densenet169 = QtWidgets.QRadioButton(self.page_3)
        self.radioButton_densenet169.setGeometry(QtCore.QRect(370, -10, 161, 41))
        self.radioButton_densenet169.setObjectName("radioButton_densenet169")
        self.radioButton_densenet201 = QtWidgets.QRadioButton(self.page_3)
        self.radioButton_densenet201.setGeometry(QtCore.QRect(540, -10, 191, 41))
        self.radioButton_densenet201.setObjectName("radioButton_densenet201")
        self.stackedWidget_train_classifier.addWidget(self.page_3)
        self.page_4 = QtWidgets.QWidget()
        self.page_4.setObjectName("page_4")
        self.radioButton_alexnet_alexnet = QtWidgets.QRadioButton(self.page_4)
        self.radioButton_alexnet_alexnet.setGeometry(QtCore.QRect(30, -10, 115, 41))
        self.radioButton_alexnet_alexnet.setChecked(True)
        self.radioButton_alexnet_alexnet.setObjectName("radioButton_alexnet_alexnet")
        self.stackedWidget_train_classifier.addWidget(self.page_4)
        self.page_5 = QtWidgets.QWidget()
        self.page_5.setObjectName("page_5")
        self.radioButton_inception_v3 = QtWidgets.QRadioButton(self.page_5)
        self.radioButton_inception_v3.setGeometry(QtCore.QRect(30, -10, 121, 41))
        self.radioButton_inception_v3.setObjectName("radioButton_inception_v3")
        self.stackedWidget_train_classifier.addWidget(self.page_5)
        self.page_6 = QtWidgets.QWidget()
        self.page_6.setObjectName("page_6")
        self.radioButton_shufflenet_v2_x0_5 = QtWidgets.QRadioButton(self.page_6)
        self.radioButton_shufflenet_v2_x0_5.setGeometry(QtCore.QRect(30, -10, 201, 41))
        self.radioButton_shufflenet_v2_x0_5.setChecked(True)
        self.radioButton_shufflenet_v2_x0_5.setObjectName("radioButton_shufflenet_v2_x0_5")
        self.radioButton_shufflenet_v2_x1_0 = QtWidgets.QRadioButton(self.page_6)
        self.radioButton_shufflenet_v2_x1_0.setGeometry(QtCore.QRect(230, -10, 201, 41))
        self.radioButton_shufflenet_v2_x1_0.setObjectName("radioButton_shufflenet_v2_x1_0")
        self.radioButton_shufflenet_v2_x1_5 = QtWidgets.QRadioButton(self.page_6)
        self.radioButton_shufflenet_v2_x1_5.setGeometry(QtCore.QRect(430, -10, 191, 41))
        self.radioButton_shufflenet_v2_x1_5.setObjectName("radioButton_shufflenet_v2_x1_5")
        self.radioButton_shufflenet_v2_x2_0 = QtWidgets.QRadioButton(self.page_6)
        self.radioButton_shufflenet_v2_x2_0.setGeometry(QtCore.QRect(630, -10, 201, 41))
        self.radioButton_shufflenet_v2_x2_0.setObjectName("radioButton_shufflenet_v2_x2_0")
        self.stackedWidget_train_classifier.addWidget(self.page_6)
        self.page_7 = QtWidgets.QWidget()
        self.page_7.setObjectName("page_7")
        self.radioButton_mobilenet_v2 = QtWidgets.QRadioButton(self.page_7)
        self.radioButton_mobilenet_v2.setGeometry(QtCore.QRect(30, -10, 141, 41))
        self.radioButton_mobilenet_v2.setChecked(True)
        self.radioButton_mobilenet_v2.setObjectName("radioButton_mobilenet_v2")
        self.stackedWidget_train_classifier.addWidget(self.page_7)
        self.page_8 = QtWidgets.QWidget()
        self.page_8.setObjectName("page_8")
        self.radioButton_squeezenet1_0 = QtWidgets.QRadioButton(self.page_8)
        self.radioButton_squeezenet1_0.setGeometry(QtCore.QRect(30, -10, 161, 41))
        self.radioButton_squeezenet1_0.setChecked(True)
        self.radioButton_squeezenet1_0.setObjectName("radioButton_squeezenet1_0")
        self.radioButton_squeezenet1_1 = QtWidgets.QRadioButton(self.page_8)
        self.radioButton_squeezenet1_1.setGeometry(QtCore.QRect(200, -10, 171, 41))
        self.radioButton_squeezenet1_1.setObjectName("radioButton_squeezenet1_1")
        self.stackedWidget_train_classifier.addWidget(self.page_8)
        self.page_9 = QtWidgets.QWidget()
        self.page_9.setObjectName("page_9")
        self.radioButton_mnasnet0_5 = QtWidgets.QRadioButton(self.page_9)
        self.radioButton_mnasnet0_5.setGeometry(QtCore.QRect(30, -10, 161, 41))
        self.radioButton_mnasnet0_5.setChecked(True)
        self.radioButton_mnasnet0_5.setObjectName("radioButton_mnasnet0_5")
        self.radioButton_mnasnet0_75 = QtWidgets.QRadioButton(self.page_9)
        self.radioButton_mnasnet0_75.setGeometry(QtCore.QRect(200, -10, 151, 41))
        self.radioButton_mnasnet0_75.setObjectName("radioButton_mnasnet0_75")
        self.radioButton_mnasnet1_0 = QtWidgets.QRadioButton(self.page_9)
        self.radioButton_mnasnet1_0.setGeometry(QtCore.QRect(370, -10, 161, 41))
        self.radioButton_mnasnet1_0.setObjectName("radioButton_mnasnet1_0")
        self.stackedWidget_train_classifier.addWidget(self.page_9)
        self.radioButton_densenet = QtWidgets.QRadioButton(Form_CNN_train_multisource)
        self.radioButton_densenet.setGeometry(QtCore.QRect(460, 60, 115, 31))
        self.radioButton_densenet.setObjectName("radioButton_densenet")
        self.label_59 = QtWidgets.QLabel(Form_CNN_train_multisource)
        self.label_59.setGeometry(QtCore.QRect(120, 450, 61, 21))
        font = QtGui.QFont()
        font.setPointSize(9)
        self.label_59.setFont(font)
        self.label_59.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.label_59.setObjectName("label_59")
        self.radioButton_mnasnet = QtWidgets.QRadioButton(Form_CNN_train_multisource)
        self.radioButton_mnasnet.setGeometry(QtCore.QRect(630, 80, 115, 41))
        self.radioButton_mnasnet.setObjectName("radioButton_mnasnet")
        self.lineEdit_step_size = QtWidgets.QLineEdit(Form_CNN_train_multisource)
        self.lineEdit_step_size.setGeometry(QtCore.QRect(720, 210, 61, 21))
        self.lineEdit_step_size.setStyleSheet("background-color: rgb(243, 243, 243);")
        self.lineEdit_step_size.setAlignment(QtCore.Qt.AlignCenter)
        self.lineEdit_step_size.setObjectName("lineEdit_step_size")
        self.radioButton_vgg = QtWidgets.QRadioButton(Form_CNN_train_multisource)
        self.radioButton_vgg.setGeometry(QtCore.QRect(290, 60, 115, 31))
        self.radioButton_vgg.setObjectName("radioButton_vgg")
        self.lineEdit_numworkers = QtWidgets.QLineEdit(Form_CNN_train_multisource)
        self.lineEdit_numworkers.setGeometry(QtCore.QRect(550, 210, 61, 21))
        self.lineEdit_numworkers.setStyleSheet("background-color: rgb(243, 243, 243);")
        self.lineEdit_numworkers.setAlignment(QtCore.Qt.AlignCenter)
        self.lineEdit_numworkers.setObjectName("lineEdit_numworkers")
        self.widget = QtWidgets.QWidget(Form_CNN_train_multisource)
        self.widget.setGeometry(QtCore.QRect(120, 350, 931, 51))
        self.widget.setObjectName("widget")
        self.radioButton = QtWidgets.QRadioButton(self.widget)
        self.radioButton.setGeometry(QtCore.QRect(0, 20, 101, 16))
        self.radioButton.setChecked(True)
        self.radioButton.setObjectName("radioButton")
        self.label_65 = QtWidgets.QLabel(Form_CNN_train_multisource)
        self.label_65.setGeometry(QtCore.QRect(800, 210, 61, 21))
        font = QtGui.QFont()
        font.setPointSize(9)
        self.label_65.setFont(font)
        self.label_65.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.label_65.setObjectName("label_65")
        self.training_show = QtWidgets.QLabel(Form_CNN_train_multisource)
        self.training_show.setGeometry(QtCore.QRect(14, 530, 1011, 191))
        self.training_show.setStyleSheet("background-color: rgb(127, 130, 136);\n"
"")
        self.training_show.setFrameShadow(QtWidgets.QFrame.Raised)
        self.training_show.setLineWidth(3)
        self.training_show.setText("")
        self.training_show.setScaledContents(False)
        self.training_show.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignTop)
        self.training_show.setObjectName("training_show")
        self.label_56 = QtWidgets.QLabel(Form_CNN_train_multisource)
        self.label_56.setGeometry(QtCore.QRect(60, 320, 161, 41))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(12)
        self.label_56.setFont(font)
        self.label_56.setObjectName("label_56")
        self.stackedWidget_2 = QtWidgets.QStackedWidget(Form_CNN_train_multisource)
        self.stackedWidget_2.setGeometry(QtCore.QRect(310, 240, 641, 41))
        self.stackedWidget_2.setObjectName("stackedWidget_2")
        self.page_10 = QtWidgets.QWidget()
        self.page_10.setObjectName("page_10")
        self.label_68 = QtWidgets.QLabel(self.page_10)
        self.label_68.setGeometry(QtCore.QRect(140, 10, 71, 21))
        font = QtGui.QFont()
        font.setPointSize(9)
        self.label_68.setFont(font)
        self.label_68.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.label_68.setObjectName("label_68")
        self.lineEdit_adam_betas1 = QtWidgets.QLineEdit(self.page_10)
        self.lineEdit_adam_betas1.setGeometry(QtCore.QRect(410, 10, 61, 21))
        self.lineEdit_adam_betas1.setStyleSheet("background-color: rgb(243, 243, 243);")
        self.lineEdit_adam_betas1.setAlignment(QtCore.Qt.AlignCenter)
        self.lineEdit_adam_betas1.setObjectName("lineEdit_adam_betas1")
        self.lineEdit_adam_betas0 = QtWidgets.QLineEdit(self.page_10)
        self.lineEdit_adam_betas0.setGeometry(QtCore.QRect(240, 10, 61, 21))
        self.lineEdit_adam_betas0.setStyleSheet("background-color: rgb(243, 243, 243);")
        self.lineEdit_adam_betas0.setAlignment(QtCore.Qt.AlignCenter)
        self.lineEdit_adam_betas0.setObjectName("lineEdit_adam_betas0")
        self.label_69 = QtWidgets.QLabel(self.page_10)
        self.label_69.setGeometry(QtCore.QRect(320, 10, 71, 21))
        font = QtGui.QFont()
        font.setPointSize(9)
        self.label_69.setFont(font)
        self.label_69.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.label_69.setObjectName("label_69")
        self.label_66 = QtWidgets.QLabel(self.page_10)
        self.label_66.setGeometry(QtCore.QRect(0, 10, 31, 21))
        font = QtGui.QFont()
        font.setPointSize(9)
        self.label_66.setFont(font)
        self.label_66.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.label_66.setObjectName("label_66")
        self.lineEdit_adam_lr = QtWidgets.QLineEdit(self.page_10)
        self.lineEdit_adam_lr.setGeometry(QtCore.QRect(60, 10, 61, 21))
        self.lineEdit_adam_lr.setStyleSheet("background-color: rgb(243, 243, 243);")
        self.lineEdit_adam_lr.setAlignment(QtCore.Qt.AlignCenter)
        self.lineEdit_adam_lr.setObjectName("lineEdit_adam_lr")
        self.label_70 = QtWidgets.QLabel(self.page_10)
        self.label_70.setGeometry(QtCore.QRect(490, 10, 51, 21))
        font = QtGui.QFont()
        font.setPointSize(9)
        self.label_70.setFont(font)
        self.label_70.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.label_70.setObjectName("label_70")
        self.lineEdit_adam_eps = QtWidgets.QLineEdit(self.page_10)
        self.lineEdit_adam_eps.setGeometry(QtCore.QRect(550, 10, 61, 21))
        self.lineEdit_adam_eps.setStyleSheet("background-color: rgb(243, 243, 243);")
        self.lineEdit_adam_eps.setAlignment(QtCore.Qt.AlignCenter)
        self.lineEdit_adam_eps.setObjectName("lineEdit_adam_eps")
        self.stackedWidget_2.addWidget(self.page_10)
        self.page_14 = QtWidgets.QWidget()
        self.page_14.setObjectName("page_14")
        self.label_71 = QtWidgets.QLabel(self.page_14)
        self.label_71.setGeometry(QtCore.QRect(10, 10, 31, 21))
        font = QtGui.QFont()
        font.setPointSize(9)
        self.label_71.setFont(font)
        self.label_71.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.label_71.setObjectName("label_71")
        self.lineEdit_rmsprop_eps = QtWidgets.QLineEdit(self.page_14)
        self.lineEdit_rmsprop_eps.setGeometry(QtCore.QRect(550, 10, 61, 21))
        self.lineEdit_rmsprop_eps.setStyleSheet("background-color: rgb(243, 243, 243);")
        self.lineEdit_rmsprop_eps.setAlignment(QtCore.Qt.AlignCenter)
        self.lineEdit_rmsprop_eps.setObjectName("lineEdit_rmsprop_eps")
        self.label_72 = QtWidgets.QLabel(self.page_14)
        self.label_72.setGeometry(QtCore.QRect(490, 10, 61, 21))
        font = QtGui.QFont()
        font.setPointSize(9)
        self.label_72.setFont(font)
        self.label_72.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.label_72.setObjectName("label_72")
        self.lineEdit_rmsprop_lr = QtWidgets.QLineEdit(self.page_14)
        self.lineEdit_rmsprop_lr.setGeometry(QtCore.QRect(60, 10, 61, 21))
        self.lineEdit_rmsprop_lr.setStyleSheet("background-color: rgb(243, 243, 243);")
        self.lineEdit_rmsprop_lr.setAlignment(QtCore.Qt.AlignCenter)
        self.lineEdit_rmsprop_lr.setObjectName("lineEdit_rmsprop_lr")
        self.label_73 = QtWidgets.QLabel(self.page_14)
        self.label_73.setGeometry(QtCore.QRect(150, 10, 61, 21))
        font = QtGui.QFont()
        font.setPointSize(9)
        self.label_73.setFont(font)
        self.label_73.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.label_73.setObjectName("label_73")
        self.lineEdit_rmsprop_alpha = QtWidgets.QLineEdit(self.page_14)
        self.lineEdit_rmsprop_alpha.setGeometry(QtCore.QRect(240, 10, 61, 21))
        self.lineEdit_rmsprop_alpha.setStyleSheet("background-color: rgb(243, 243, 243);")
        self.lineEdit_rmsprop_alpha.setAlignment(QtCore.Qt.AlignCenter)
        self.lineEdit_rmsprop_alpha.setObjectName("lineEdit_rmsprop_alpha")
        self.lineEdit_rmsprop_momentum = QtWidgets.QLineEdit(self.page_14)
        self.lineEdit_rmsprop_momentum.setGeometry(QtCore.QRect(410, 10, 61, 21))
        self.lineEdit_rmsprop_momentum.setStyleSheet("background-color: rgb(243, 243, 243);")
        self.lineEdit_rmsprop_momentum.setAlignment(QtCore.Qt.AlignCenter)
        self.lineEdit_rmsprop_momentum.setObjectName("lineEdit_rmsprop_momentum")
        self.label_74 = QtWidgets.QLabel(self.page_14)
        self.label_74.setGeometry(QtCore.QRect(320, 10, 81, 21))
        font = QtGui.QFont()
        font.setPointSize(9)
        self.label_74.setFont(font)
        self.label_74.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.label_74.setObjectName("label_74")
        self.stackedWidget_2.addWidget(self.page_14)
        self.page_11 = QtWidgets.QWidget()
        self.page_11.setObjectName("page_11")
        self.label_83 = QtWidgets.QLabel(self.page_11)
        self.label_83.setGeometry(QtCore.QRect(120, 10, 121, 21))
        font = QtGui.QFont()
        font.setPointSize(9)
        self.label_83.setFont(font)
        self.label_83.setAlignment(QtCore.Qt.AlignCenter)
        self.label_83.setObjectName("label_83")
        self.label_84 = QtWidgets.QLabel(self.page_11)
        self.label_84.setGeometry(QtCore.QRect(-20, 10, 81, 21))
        font = QtGui.QFont()
        font.setPointSize(9)
        self.label_84.setFont(font)
        self.label_84.setTextFormat(QtCore.Qt.AutoText)
        self.label_84.setAlignment(QtCore.Qt.AlignCenter)
        self.label_84.setObjectName("label_84")
        self.lineEdit_sgd_momentum = QtWidgets.QLineEdit(self.page_11)
        self.lineEdit_sgd_momentum.setGeometry(QtCore.QRect(240, 10, 61, 21))
        self.lineEdit_sgd_momentum.setStyleSheet("background-color: rgb(243, 243, 243);")
        self.lineEdit_sgd_momentum.setAlignment(QtCore.Qt.AlignCenter)
        self.lineEdit_sgd_momentum.setObjectName("lineEdit_sgd_momentum")
        self.lineEdit_sgd_lr = QtWidgets.QLineEdit(self.page_11)
        self.lineEdit_sgd_lr.setGeometry(QtCore.QRect(60, 10, 61, 21))
        self.lineEdit_sgd_lr.setStyleSheet("background-color: rgb(243, 243, 243);")
        self.lineEdit_sgd_lr.setAlignment(QtCore.Qt.AlignCenter)
        self.lineEdit_sgd_lr.setObjectName("lineEdit_sgd_lr")
        self.label_85 = QtWidgets.QLabel(self.page_11)
        self.label_85.setGeometry(QtCore.QRect(300, 10, 111, 21))
        font = QtGui.QFont()
        font.setPointSize(9)
        self.label_85.setFont(font)
        self.label_85.setAlignment(QtCore.Qt.AlignCenter)
        self.label_85.setObjectName("label_85")
        self.lineEdit_sgd_dampening = QtWidgets.QLineEdit(self.page_11)
        self.lineEdit_sgd_dampening.setGeometry(QtCore.QRect(410, 10, 61, 21))
        self.lineEdit_sgd_dampening.setStyleSheet("background-color: rgb(243, 243, 243);")
        self.lineEdit_sgd_dampening.setAlignment(QtCore.Qt.AlignCenter)
        self.lineEdit_sgd_dampening.setObjectName("lineEdit_sgd_dampening")
        self.stackedWidget_2.addWidget(self.page_11)
        self.label_58 = QtWidgets.QLabel(Form_CNN_train_multisource)
        self.label_58.setGeometry(QtCore.QRect(60, 160, 241, 41))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(12)
        self.label_58.setFont(font)
        self.label_58.setObjectName("label_58")
        self.lineEdit_epochs = QtWidgets.QLineEdit(Form_CNN_train_multisource)
        self.lineEdit_epochs.setGeometry(QtCore.QRect(370, 210, 61, 21))
        self.lineEdit_epochs.setStyleSheet("background-color: rgb(243, 243, 243);")
        self.lineEdit_epochs.setAlignment(QtCore.Qt.AlignCenter)
        self.lineEdit_epochs.setObjectName("lineEdit_epochs")
        self.label_3 = QtWidgets.QLabel(Form_CNN_train_multisource)
        self.label_3.setGeometry(QtCore.QRect(1275, 645, 199, 20))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(14)
        self.label_3.setFont(font)
        self.label_3.setAlignment(QtCore.Qt.AlignCenter)
        self.label_3.setObjectName("label_3")

        self.retranslateUi(Form_CNN_train_multisource)
        self.stackedWidget_train_classifier.setCurrentIndex(0)
        self.stackedWidget_2.setCurrentIndex(0)
        QtCore.QMetaObject.connectSlotsByName(Form_CNN_train_multisource)

    def retranslateUi(self, Form_CNN_train_multisource):
        _translate = QtCore.QCoreApplication.translate
        Form_CNN_train_multisource.setWindowTitle(_translate("Form_CNN_train_multisource", "Train Model with Multi-Source Data"))
        self.radioButton_resnet.setText(_translate("Form_CNN_train_multisource", "ResNet"))
        self.lineEdit_gamma.setText(_translate("Form_CNN_train_multisource", "0.1"))
        self.pushButton_8.setText(_translate("Form_CNN_train_multisource", "Train"))
        self.checkBox_shuffle.setText(_translate("Form_CNN_train_multisource", "Shuffle"))
        self.checkBox_randomverticalflip.setText(_translate("Form_CNN_train_multisource", "RandomVerticalFlip"))
        self.radioButton_inception.setText(_translate("Form_CNN_train_multisource", "Inception"))
        self.radioButton_alexnet.setText(_translate("Form_CNN_train_multisource", "AlexNet"))
        self.lineEdit_resize.setText(_translate("Form_CNN_train_multisource", "32"))
        self.label_67.setText(_translate("Form_CNN_train_multisource", "Num Workers"))
        self.label_60.setText(_translate("Form_CNN_train_multisource", "CenterCrop"))
        self.radioButton_squeezenet.setText(_translate("Form_CNN_train_multisource", "SqueezeNet"))
        self.checkBox_pretrained.setText(_translate("Form_CNN_train_multisource", "Pretrained"))
        self.lineEdit_batch_size.setText(_translate("Form_CNN_train_multisource", "16"))
        self.label_145.setText(_translate("Form_CNN_train_multisource", "Optimizer"))
        self.comboBox_optim.setItemText(0, _translate("Form_CNN_train_multisource", "Adam"))
        self.comboBox_optim.setItemText(1, _translate("Form_CNN_train_multisource", "RMSprop"))
        self.comboBox_optim.setItemText(2, _translate("Form_CNN_train_multisource", "SGD"))
        self.label_63.setText(_translate("Form_CNN_train_multisource", "Epochs"))
        self.radioButton_mobilenet.setText(_translate("Form_CNN_train_multisource", "MobileNet"))
        self.label_57.setText(_translate("Form_CNN_train_multisource", "Model Selection:"))
        self.label_64.setText(_translate("Form_CNN_train_multisource", "Step Size"))
        self.label_62.setText(_translate("Form_CNN_train_multisource", "Batch Size"))
        self.radioButton_shufflenet.setText(_translate("Form_CNN_train_multisource", "ShuffleNet"))
        self.label_61.setText(_translate("Form_CNN_train_multisource", "Data Transformations:"))
        self.checkBox_randomhorizontalflip.setText(_translate("Form_CNN_train_multisource", "RandomHorizontalFlip"))
        self.lineEdit_centercrop.setText(_translate("Form_CNN_train_multisource", "32"))
        self.radioButton_resnet18.setText(_translate("Form_CNN_train_multisource", "ResNet18"))
        self.radioButton_resnet34.setText(_translate("Form_CNN_train_multisource", "ResNet34"))
        self.radioButton_resnet50.setText(_translate("Form_CNN_train_multisource", "ResNet50"))
        self.radioButton_resnet101.setText(_translate("Form_CNN_train_multisource", "ResNet101"))
        self.radioButton_resnet152.setText(_translate("Form_CNN_train_multisource", "ResNet152"))
        self.radioButton_vgg11.setText(_translate("Form_CNN_train_multisource", "VGG11"))
        self.radioButton_vgg13.setText(_translate("Form_CNN_train_multisource", "VGG13"))
        self.radioButton_vgg16.setText(_translate("Form_CNN_train_multisource", "VGG16"))
        self.radioButton_vgg19.setText(_translate("Form_CNN_train_multisource", "VGG19"))
        self.radioButton_densenet121.setText(_translate("Form_CNN_train_multisource", "DenseNet121"))
        self.radioButton_densenet161.setText(_translate("Form_CNN_train_multisource", "DenseNet161"))
        self.radioButton_densenet169.setText(_translate("Form_CNN_train_multisource", "DenseNet169"))
        self.radioButton_densenet201.setText(_translate("Form_CNN_train_multisource", "DenseNet201"))
        self.radioButton_alexnet_alexnet.setText(_translate("Form_CNN_train_multisource", "AlexNet"))
        self.radioButton_inception_v3.setText(_translate("Form_CNN_train_multisource", "Inception_V3"))
        self.radioButton_shufflenet_v2_x0_5.setText(_translate("Form_CNN_train_multisource", "Shufflenet_v2_x0_5"))
        self.radioButton_shufflenet_v2_x1_0.setText(_translate("Form_CNN_train_multisource", "Shufflenet_v2_x1_0"))
        self.radioButton_shufflenet_v2_x1_5.setText(_translate("Form_CNN_train_multisource", "Shufflenet_v2_x1_5"))
        self.radioButton_shufflenet_v2_x2_0.setText(_translate("Form_CNN_train_multisource", "Shufflenet_v2_x2_0"))
        self.radioButton_mobilenet_v2.setText(_translate("Form_CNN_train_multisource", "MobileNet_V2"))
        self.radioButton_squeezenet1_0.setText(_translate("Form_CNN_train_multisource", "SqueezeNet1_0"))
        self.radioButton_squeezenet1_1.setText(_translate("Form_CNN_train_multisource", "SqueezeNet1_1"))
        self.radioButton_mnasnet0_5.setText(_translate("Form_CNN_train_multisource", "MnasNet0_5"))
        self.radioButton_mnasnet0_75.setText(_translate("Form_CNN_train_multisource", "MnasNet0_75"))
        self.radioButton_mnasnet1_0.setText(_translate("Form_CNN_train_multisource", "MnasNet1_0"))
        self.radioButton_densenet.setText(_translate("Form_CNN_train_multisource", "DenseNet"))
        self.label_59.setText(_translate("Form_CNN_train_multisource", "Resize"))
        self.radioButton_mnasnet.setText(_translate("Form_CNN_train_multisource", "MnasNet"))
        self.lineEdit_step_size.setText(_translate("Form_CNN_train_multisource", "20"))
        self.radioButton_vgg.setText(_translate("Form_CNN_train_multisource", "VGG"))
        self.lineEdit_numworkers.setText(_translate("Form_CNN_train_multisource", "0"))
        self.radioButton.setText(_translate("Form_CNN_train_multisource", "So2Sat"))
        self.label_65.setText(_translate("Form_CNN_train_multisource", "Gamma"))
        self.label_56.setText(_translate("Form_CNN_train_multisource", "Data Address："))
        self.label_68.setText(_translate("Form_CNN_train_multisource", "betas0"))
        self.lineEdit_adam_betas1.setText(_translate("Form_CNN_train_multisource", "0.999"))
        self.lineEdit_adam_betas0.setText(_translate("Form_CNN_train_multisource", "0.9"))
        self.label_69.setText(_translate("Form_CNN_train_multisource", "betas1"))
        self.label_66.setText(_translate("Form_CNN_train_multisource", "Lr"))
        self.lineEdit_adam_lr.setText(_translate("Form_CNN_train_multisource", "0.001"))
        self.label_70.setText(_translate("Form_CNN_train_multisource", "eps"))
        self.lineEdit_adam_eps.setText(_translate("Form_CNN_train_multisource", "1e-8"))
        self.label_71.setText(_translate("Form_CNN_train_multisource", "Lr"))
        self.lineEdit_rmsprop_eps.setText(_translate("Form_CNN_train_multisource", "1e-8"))
        self.label_72.setText(_translate("Form_CNN_train_multisource", "eps"))
        self.lineEdit_rmsprop_lr.setText(_translate("Form_CNN_train_multisource", "0.01"))
        self.label_73.setText(_translate("Form_CNN_train_multisource", "alpha"))
        self.lineEdit_rmsprop_alpha.setText(_translate("Form_CNN_train_multisource", "0.99"))
        self.lineEdit_rmsprop_momentum.setText(_translate("Form_CNN_train_multisource", "0.99"))
        self.label_74.setText(_translate("Form_CNN_train_multisource", "momentum"))
        self.label_83.setText(_translate("Form_CNN_train_multisource", "momentum"))
        self.label_84.setText(_translate("Form_CNN_train_multisource", "Lr"))
        self.lineEdit_sgd_momentum.setText(_translate("Form_CNN_train_multisource", "0.99"))
        self.lineEdit_sgd_lr.setText(_translate("Form_CNN_train_multisource", "0.01"))
        self.label_85.setText(_translate("Form_CNN_train_multisource", "dampening"))
        self.lineEdit_sgd_dampening.setText(_translate("Form_CNN_train_multisource", "0"))
        self.label_58.setText(_translate("Form_CNN_train_multisource", "Train Parameters:"))
        self.lineEdit_epochs.setText(_translate("Form_CNN_train_multisource", "100"))
        self.label_3.setText(_translate("Form_CNN_train_multisource", "Confusion Matrix"))


    def caolianjie(self):
        self.comboBox_optim.currentIndexChanged.connect(self.CNN_optim_choose)
        # self.pushButton_CNN_classification_data_address.clicked.connect(self.choose_CNN_data_dir)
        self.CNN_train_classifier = 'ResNet18'
        self.CNN_train_dataset = "so2sat"
        self.radioButton_resnet.toggled.connect(self.CNN_classification_train_classifier_choose_resnet)
        self.radioButton_resnet18.toggled.connect(self.CNN_classification_train_classifier_choose_resnet)
        self.radioButton_resnet34.toggled.connect(self.CNN_classification_train_classifier_choose_resnet)
        self.radioButton_resnet50.toggled.connect(self.CNN_classification_train_classifier_choose_resnet)
        self.radioButton_resnet101.toggled.connect(self.CNN_classification_train_classifier_choose_resnet)
        self.radioButton_resnet152.toggled.connect(self.CNN_classification_train_classifier_choose_resnet)
        self.radioButton_vgg.toggled.connect(self.CNN_classification_train_classifier_choose_vgg)
        self.radioButton_vgg11.toggled.connect(self.CNN_classification_train_classifier_choose_vgg)
        self.radioButton_vgg13.toggled.connect(self.CNN_classification_train_classifier_choose_vgg)
        self.radioButton_vgg16.toggled.connect(self.CNN_classification_train_classifier_choose_vgg)
        self.radioButton_vgg19.toggled.connect(self.CNN_classification_train_classifier_choose_vgg)
        self.radioButton_densenet.toggled.connect(self.CNN_classification_train_classifier_choose_densenet)
        self.radioButton_densenet121.toggled.connect(self.CNN_classification_train_classifier_choose_densenet)
        self.radioButton_densenet161.toggled.connect(self.CNN_classification_train_classifier_choose_densenet)
        self.radioButton_densenet169.toggled.connect(self.CNN_classification_train_classifier_choose_densenet)
        self.radioButton_densenet201.toggled.connect(self.CNN_classification_train_classifier_choose_densenet)
        self.radioButton_alexnet.toggled.connect(self.CNN_classification_train_classifier_choose_alexnet)
        self.radioButton_alexnet_alexnet.toggled.connect(self.CNN_classification_train_classifier_choose_alexnet)
        self.radioButton_inception.toggled.connect(self.CNN_classification_train_classifier_choose_inception)
        self.radioButton_inception_v3.toggled.connect(self.CNN_classification_train_classifier_choose_inception)
        self.radioButton_shufflenet.toggled.connect(self.CNN_classification_train_classifier_choose_shufflenet)
        self.radioButton_shufflenet_v2_x0_5.toggled.connect(self.CNN_classification_train_classifier_choose_shufflenet)
        self.radioButton_shufflenet_v2_x1_0.toggled.connect(self.CNN_classification_train_classifier_choose_shufflenet)
        self.radioButton_shufflenet_v2_x1_5.toggled.connect(self.CNN_classification_train_classifier_choose_shufflenet)
        self.radioButton_shufflenet_v2_x2_0.toggled.connect(self.CNN_classification_train_classifier_choose_shufflenet)
        self.radioButton_mobilenet.toggled.connect(self.CNN_classification_train_classifier_choose_mobilenet)
        self.radioButton_mobilenet_v2.toggled.connect(self.CNN_classification_train_classifier_choose_mobilenet)
        self.radioButton_squeezenet.toggled.connect(self.CNN_classification_train_classifier_choose_squeezenet)
        self.radioButton_squeezenet1_0.toggled.connect(self.CNN_classification_train_classifier_choose_squeezenet)
        self.radioButton_squeezenet1_1.toggled.connect(self.CNN_classification_train_classifier_choose_squeezenet)
        self.radioButton_mnasnet.toggled.connect(self.CNN_classification_train_classifier_choose_mnasnet)
        self.radioButton_mnasnet0_5.toggled.connect(self.CNN_classification_train_classifier_choose_mnasnet)
        self.radioButton_mnasnet0_75.toggled.connect(self.CNN_classification_train_classifier_choose_mnasnet)
        self.radioButton_mnasnet1_0.toggled.connect(self.CNN_classification_train_classifier_choose_mnasnet)
        self.radioButton.toggled.connect(self.CNN_classification_choose_dataset)
        self.pushButton_8.clicked.connect(
            lambda: self.CNN_train(self.CNN_train_dataset,self.CNN_train_classifier,
                                   self.lineEdit_batch_size.text(), self.lineEdit_epochs.text(),
                                   self.lineEdit_numworkers.text(), self.lineEdit_step_size.text(),
                                   self.lineEdit_gamma.text(), self.comboBox_optim.currentText(),
                                   self.lineEdit_adam_lr.text(), self.lineEdit_adam_betas0.text(),
                                   self.lineEdit_adam_betas1.text(), self.lineEdit_adam_eps.text(),
                                   self.lineEdit_rmsprop_lr.text(), self.lineEdit_rmsprop_alpha.text(),
                                   self.lineEdit_rmsprop_momentum.text(), self.lineEdit_rmsprop_eps.text(),
                                   self.lineEdit_sgd_lr.text(), self.lineEdit_sgd_momentum.text(),
                                   self.lineEdit_sgd_dampening.text(), self.checkBox_pretrained.isChecked(),
                                   self.lineEdit_resize.text(), self.lineEdit_centercrop.text(),
                                   self.checkBox_randomverticalflip.isChecked(),
                                   self.checkBox_randomhorizontalflip.isChecked(),
                                   self.checkBox_shuffle.isChecked()))

    def CNN_train(self, CNN_train_dataset, CNN_classifier, batch_size, epochs, numworkers, step_size,
                  gamma, optim, adam_lr, adam_betas0, adam_betas1, adam_eps, rmsprop_lr, rmsprop_alpha,
                  rmsprop_momentum, rmsprop_eps, sgd_lr, sgd_momentum, sgd_dampening, ifpretrained,
                  resize, centercrop, ifrandomverticalflip, ifrandomhorizontalflip, ifshuffle,
                  ):
        self.thread_CNN_train = Thread_CNN_train_multisource(CNN_train_dataset, CNN_classifier, batch_size, epochs, numworkers,
                                                 step_size,
                                                 gamma, optim, adam_lr, adam_betas0, adam_betas1, adam_eps, rmsprop_lr,
                                                 rmsprop_alpha,
                                                 rmsprop_momentum, rmsprop_eps, sgd_lr, sgd_momentum, sgd_dampening,
                                                 ifpretrained,
                                                 resize, centercrop, ifrandomverticalflip, ifrandomhorizontalflip,
                                                 ifshuffle,
                                                 )
        self.thread_CNN_train.update_train.connect(self.get_CNN_train_result)
        self.thread_CNN_train.start()
        self.thread_CNN_train.exec()


        # out={0:train_set,1:test_cleandata_cm,2:data_name,3:sub_dir,4:CNN_classifier,5:False,6:correct}
    def get_CNN_train_result(self, train_result):
        print(train_result)

        self.training_show.setText(train_result[0])
        self.training_show.repaint()
        if train_result[5] == False:

            self.training_show.setText(train_result[0]+'\n Accuracy on test set：{}'.format(train_result[6]))
            self.training_show.repaint()

            test_cm = train_result[1]
            plt.rcParams['font.sans-serif'] = ['SimHei']
            plt.rcParams['axes.unicode_minus'] = False

            plt.imshow(test_cm, interpolation='nearest', cmap=plt.cm.Oranges)
            # plt.title('混淆矩阵')
            plt.colorbar()
            sub_dir = train_result[3]
            indices = range(len(sub_dir))
            plt.xticks(indices, sub_dir)
            plt.xticks(rotation=90)
            plt.yticks(indices, sub_dir)
            plt.tick_params(labelsize=8)
            print(test_cm.shape)
            print(test_cm)
            print(len(sub_dir))
            iters = np.reshape([[[i, j] for j in range(len(sub_dir))] for i in range(len(sub_dir))], (test_cm.size, 2))
            if train_result[2] == 'so2sat':
                type_size = 12

            for i, j in iters:
                plt.text(j, i, '%.0f' % (test_cm[i, j]), horizontalalignment='center',
                         verticalalignment='center', fontdict={'size': type_size, 'color': 'black'})
            plt.xlabel('Predicted Labels')
            plt.ylabel('True Labels')
            plt.tight_layout()
            plt.savefig('result_image/{}_{}.jpg'.format(train_result[2],  train_result[4]))
            plt.close('all')
            self.openimage_label_image_show_models('result_image/{}_{}.jpg'.format(train_result[2],  train_result[4]))

        ##########################################测试槽函数##############################################3

        ####################链接读取地址函数##################

    # def get_CNN_dataset_test_result(self, test_result):
    #     self.training_show.setText(test_result[0])
    #     self.training_show.repaint()
    #
    #     engine = pyttsx3.init()
    #     engine.say('分类正确率为')
    #     engine.say('百分之')
    #     engine.say(test_result[3])
    #     engine.runAndWait()
    #
    #     test_cm = test_result[1]
    #     sub_dir = test_result[2]
    #     plt.imshow(test_cm, cmap=plt.cm.Reds)
    #     indices = range(len(test_cm))
    #     plt.xticks(indices, sub_dir)
    #     plt.yticks(indices, sub_dir)
    #     # plt.colorbar()
    #
    #     plt.xlabel('预测标签')
    #     plt.ylabel('真实标签')
    #     plt.title('混淆矩阵')
    #     plt.rcParams['font.sans-serif'] = ['SimHei']
    #     plt.rcParams['axes.unicode_minus'] = False
    #
    #     for first_index in range(len(test_cm)):  # 第几行
    #         for second_index in range(len(test_cm[first_index])):  # 第几列
    #             plt.text(first_index, second_index, test_cm[first_index][second_index], verticalalignment='center',
    #                      horizontalalignment='center')
    #     # plt.show()
    #     plt.savefig('result_image/CNN_cm.jpg')
    #     plt.close('all')
    #     self.openimage_cm('result_image/CNN_cm.jpg')

    def openimage_label_image_show_models(self, imgName):
        imgName = imgName.replace('\\', '/')

        jpg = QtGui.QPixmap(imgName).scaled(self.label_image_show_2.width(), self.label_image_show_2.height())
        self.label_image_show_2.setPixmap(jpg)
        self.label_image_show_2.repaint()


    def CNN_classification_choose_dataset(self):
        if self.radioButton.isChecked():
            self.CNN_train_dataset = "so2sat"
        elif self.radioButton_2.isChecked():
            self.CNN_train_dataset = "UC"


        print(self.CNN_train_dataset)

    def CNN_classification_train_classifier_choose_resnet(self):
        if self.radioButton_resnet.isChecked():
            self.CNN_train_classifier = 'ResNet18'
            self.stackedWidget_train_classifier.setCurrentIndex(0)
            if self.radioButton_resnet18.isChecked():
                self.CNN_train_classifier = 'ResNet18'
            elif self.radioButton_resnet34.isChecked():
                self.CNN_train_classifier = 'ResNet34'
            elif self.radioButton_resnet50.isChecked():
                self.CNN_train_classifier = 'ResNet50'
            elif self.radioButton_resnet101.isChecked():
                self.CNN_train_classifier = 'ResNet101'
            elif self.radioButton_resnet152.isChecked():
                self.CNN_train_classifier = 'ResNet152'

        print(self.CNN_train_classifier)

    def CNN_classification_train_classifier_choose_vgg(self):
        if self.radioButton_vgg.isChecked():
            self.CNN_train_classifier = 'VGG16'
            self.stackedWidget_train_classifier.setCurrentIndex(1)
            if self.radioButton_vgg11.isChecked():
                self.CNN_train_classifier = 'VGG11'
            elif self.radioButton_vgg13.isChecked():
                self.CNN_train_classifier = 'VGG13'
            elif self.radioButton_vgg16.isChecked():
                self.CNN_train_classifier = 'VGG16'
            elif self.radioButton_vgg19.isChecked():
                self.CNN_train_classifier = 'VGG19'

        print(self.CNN_train_classifier)

    def CNN_classification_train_classifier_choose_densenet(self):
        if self.radioButton_densenet.isChecked():
            self.CNN_train_classifier = 'densenet121'
            self.stackedWidget_train_classifier.setCurrentIndex(2)
            if self.radioButton_densenet121.isChecked():
                self.CNN_train_classifier = 'densenet121'
            elif self.radioButton_densenet161.isChecked():
                self.CNN_train_classifier = 'densenet161'
            elif self.radioButton_densenet169.isChecked():
                self.CNN_train_classifier = 'densenet169'
            elif self.radioButton_densenet201.isChecked():
                self.CNN_train_classifier = 'densenet201'

        print(self.CNN_train_classifier)

    def CNN_classification_train_classifier_choose_alexnet(self):
        if self.radioButton_alexnet.isChecked():
            self.CNN_train_classifier = 'alexnet'
            self.stackedWidget_train_classifier.setCurrentIndex(3)
            if self.radioButton_inception_v3.isChecked():
                self.CNN_train_classifier = 'inception_v3'

        print(self.CNN_train_classifier)

    def CNN_classification_train_classifier_choose_inception(self):
        if self.radioButton_inception.isChecked():
            self.CNN_train_classifier = 'inception_v3'
            self.stackedWidget_train_classifier.setCurrentIndex(4)
            if self.radioButton_inception_v3.isChecked():
                self.CNN_train_classifier = 'inception_v3'

        print(self.CNN_train_classifier)

    def CNN_classification_train_classifier_choose_shufflenet(self):
        if self.radioButton_shufflenet.isChecked():
            self.CNN_train_classifier = 'shufflenet_v2_x0_5'
            self.stackedWidget_train_classifier.setCurrentIndex(5)
            if self.radioButton_shufflenet_v2_x0_5.isChecked():
                self.CNN_train_classifier = 'shufflenet_v2_x0_5'
            elif self.radioButton_shufflenet_v2_x1_0.isChecked():
                self.CNN_train_classifier = 'shufflenet_v2_x1_0'
            elif self.radioButton_shufflenet_v2_x1_5.isChecked():
                self.CNN_train_classifier = 'shufflenet_v2_x1_5'
            elif self.radioButton_shufflenet_v2_x2_0.isChecked():
                self.CNN_train_classifier = 'shufflenet_v2_x2_0'

        print(self.CNN_train_classifier)

    def CNN_classification_train_classifier_choose_mobilenet(self):
        if self.radioButton_mobilenet.isChecked():
            self.CNN_train_classifier = 'mobilenet_v2'
            self.stackedWidget_train_classifier.setCurrentIndex(6)
            if self.radioButton_mobilenet_v2.isChecked():
                self.CNN_train_classifier = 'mobilenet_v2'

        print(self.CNN_train_classifier)

    def CNN_classification_train_classifier_choose_squeezenet(self):
        if self.radioButton_squeezenet.isChecked():
            self.CNN_train_classifier = 'squeezenet1_0'
            self.stackedWidget_train_classifier.setCurrentIndex(7)
            if self.radioButton_squeezenet1_0.isChecked():
                self.CNN_train_classifier = 'squeezenet1_0'
            elif self.radioButton_squeezenet1_1.isChecked():
                self.CNN_train_classifier = 'squeezenet1_1'
        print(self.CNN_train_classifier)

    def CNN_classification_train_classifier_choose_mnasnet(self):
        if self.radioButton_mnasnet.isChecked():
            self.CNN_train_classifier = 'mnasnet0_5'
            self.stackedWidget_train_classifier.setCurrentIndex(8)
            if self.radioButton_mnasnet0_5.isChecked():
                self.CNN_train_classifier = 'mnasnet0_5'
            elif self.radioButton_mnasnet0_75.isChecked():
                self.CNN_train_classifier = 'mnasnet0_75'
            elif self.radioButton_mnasnet1_0.isChecked():
                self.CNN_train_classifier = 'mnasnet1_0'
        print(self.CNN_train_classifier)
        ###################分类器选取##############################
    def CNN_optim_choose(self):
        if self.comboBox_optim.currentText() == 'Adam':
            self.stackedWidget_2.setCurrentIndex(0)
        elif self.comboBox_optim.currentText() == 'RMSprop':
            self.stackedWidget_2.setCurrentIndex(1)
        elif self.comboBox_optim.currentText() == 'SGD':
            self.stackedWidget_2.setCurrentIndex(2)


        # if self.radioButton.isChecked():
        #     self.CNN_train_dataset = "MSTAR"
        # elif self.radioButton_2.isChecked():
        #     self.CNN_train_dataset = "AID"
        # elif self.radioButton_3.isChecked():
        #     self.CNN_train_dataset = "FGSC-23"
        # elif self.radioButton_4.isChecked():
        #     self.CNN_train_dataset = "FUSAR-Ship"


class Thread_CNN_train_multisource(QThread):
    update_train = pyqtSignal(dict)

    def __init__(self,CNN_train_dataset,CNN_classifier,batch_size,epochs,numworkers,step_size,
                 gamma,optim,adam_lr,adam_betas0,adam_betas1,adam_eps,rmsprop_lr,rmsprop_alpha,
                 rmsprop_momentum,rmsprop_eps,sgd_lr,sgd_momentum,sgd_dampening,ifpretrained,
                 resize,centercrop,ifrandomverticalflip,ifrandomhorizontalflip,ifshuffle,
                 ):
        super().__init__()
        self.CNN_train_dataset = CNN_train_dataset
        self.CNN_classifier = CNN_classifier
        self.batch_size, self.epochs, self.numworkers, self.step_size = int(batch_size), int(epochs), int(numworkers), int(step_size)
        self.gamma, self.optim, self.adam_lr, self.adam_betas0, self.adam_betas1, self.adam_eps, self.rmsprop_lr, self.rmsprop_alpha=float(gamma), optim, float(adam_lr), float(adam_betas0), float(adam_betas1), float(adam_eps), float(rmsprop_lr), float(rmsprop_alpha)
        self.rmsprop_momentum, self.rmsprop_eps, self.sgd_lr, self.sgd_momentum, self.sgd_dampening, self.ifpretrained = float(rmsprop_momentum), float(rmsprop_eps), float(sgd_lr), float(sgd_momentum), float(sgd_dampening), ifpretrained
        self.resize, self.centercrop, self.ifrandomverticalflip, self.ifrandomhorizontalflip, self.ifshuffle=int(resize), int(centercrop), ifrandomverticalflip, ifrandomhorizontalflip, ifshuffle
        self.channel_num_opt,self.channel_num_sar,self.mean0,self.mean1,self.mean2,self.std0,self.std1,self.std2=int(3),int(1),float(0.485),float(0.456),float(0.406),float(0.229),float(0.224),float(0.225)

        if self.CNN_train_dataset == "so2sat":
            self.CNN_train_address = 'Data\\so2sat'
            self.channel_num_opt = 3
            self.channel_num_sar = 1

        sub_dir = ['居民区','工业区','林区','沙地','水体']
        self.class_num = len(sub_dir)
        # print(self.class_num)
    def run(self):
        train_set = self.train_set()
        out={0:train_set,5:True}
        self.update_train.emit(out)

        test_cleandata_cm,sub_dir,data_name, CNN_classifier, correct = self.image_train_multisource_all()

        out={0:train_set,1:test_cleandata_cm,2:data_name,3:sub_dir,4:CNN_classifier,5:False,6:correct}
        self.update_train.emit(out)

    def train_set(self):
        out = []
        out.extend(['CNN Train：', '\n', 'CNN Type： ', self.CNN_classifier, '\n', 'Data：So2Sat '])
        out.extend(['\n','Train Parameters： ', ' batch size:', self.batch_size, ' epochs:', self.epochs, ' num workers:', self.numworkers,
                    ' step size:', self.step_size, ' gamma:', self.gamma,'\n', ' optimizer:', self.optim])
        if self.optim == 'Adam':
            out.extend([' lr:', self.adam_lr, ' (betas0,betas1):(', self.adam_betas0, ',', self.adam_betas1, ')', ' eps:',
                        self.adam_eps])
        elif self.optim == 'RMSprop':
            out.extend([' lr:', self.rmsprop_lr, ' alpha:', self.rmsprop_alpha, ' momentum', self.rmsprop_momentum, ' eps',
                        self.rmsprop_eps])
        elif self.optim == 'SGD':
            out.extend([' lr:', self.sgd_lr, ' momentum:', self.sgd_momentum, ' dampening:', self.sgd_dampening])
        out.extend(['\n','Data Transformations： ',' resize:',self.resize,' centercrop:',self.centercrop,' RandomVerticalFlip:',self.ifrandomverticalflip,' RandomHorizontalFlip:',self.ifrandomhorizontalflip,' shuffle:',self.ifshuffle])

        # if self.channel_num == 3:
        #     out.extend([' mean0,mean1,mean2:',self.mean0,',',self.mean1,',',self.mean2,',',' std0,std1,std2:',self.std0,',',self.std1,',',self.std2])
        # elif self.channel_num == 1:
        #     out.extend([' mean0:',self.mean0,' std0:',self.std0])
        out = [str(i) for i in out]
        out = "".join(out)
        return out
    def image_train_multisource_all(self):


        data_name = 'so2sat'
        sub_dir = ['居民区','工业区','林区','沙地','水体']

        dataloaders_opt, dataloaders_sar, dataset_sizes = self.load_so2sat()
        model_opt_yijiagu,out_opt = self.train(self.CNN_classifier,dataloaders_opt,dataset_sizes,channel_num=3)
        model_sar_yijiagu,out_sar = self.train(self.CNN_classifier,dataloaders_sar,dataset_sizes,channel_num=1)

        torch.save(model_opt_yijiagu,'pths/{}_opt_{}.pth'.format(data_name,self.CNN_classifier))
        torch.save(model_sar_yijiagu,'pths/{}_sar_{}.pth'.format(data_name,self.CNN_classifier))
        test_cleandata_cm,correct = self.test(model_opt_yijiagu,dataloaders_opt['val'],dataset_sizes['val'])
        # print({0:test_cleandata_cm,1:sub_dir,2:data_name,3:self.CNN_classifier,4:correct})
        print(self.CNN_classifier,'self.CNN_classifier')
        return(test_cleandata_cm,sub_dir,data_name,self.CNN_classifier,correct)


    def train(self,model_name,dataloders,dataset_sizes,channel_num,optorsar='opt'):
        use_gpu = torch.cuda.is_available()

        if model_name == 'ResNet18':
            model = torchvision.models.resnet18(pretrained=self.ifpretrained)
            if channel_num == 1:
                model.conv1 = nn.Conv2d(1, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
            num_ftrs = model.fc.in_features
            model.fc = nn.Linear(num_ftrs, self.class_num)
        elif model_name == 'ResNet34':
            model = torchvision.models.resnet34(pretrained=self.ifpretrained)
            if channel_num == 1:
                model.conv1 = nn.Conv2d(1, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
            num_ftrs = model.fc.in_features
            model.fc = nn.Linear(num_ftrs, self.class_num)
        elif model_name == 'ResNet50':
            model = torchvision.models.resnet50(pretrained=self.ifpretrained)
            if channel_num == 1:
                model.conv1 = nn.Conv2d(1, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
            num_ftrs = model.fc.in_features
            model.fc = nn.Linear(num_ftrs, self.class_num)
        elif model_name == 'ResNet101':
            model = torchvision.models.resnet101(pretrained=self.ifpretrained)
            if channel_num == 1:
                model.conv1 = nn.Conv2d(1, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
            num_ftrs = model.fc.in_features
            model.fc = nn.Linear(num_ftrs, self.class_num)
        elif model_name == 'ResNet152':
            model = torchvision.models.resnet152(pretrained=self.ifpretrained)
            if channel_num == 1:
                model.conv1 = nn.Conv2d(1, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
            num_ftrs = model.fc.in_features
            model.fc = nn.Linear(num_ftrs, self.class_num)
        elif model_name == 'VGG11':
            model = torchvision.models.vgg11(pretrained=self.ifpretrained)
            if channel_num == 1:
                model.features[0] = nn.Conv2d(1, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            model.classifier[6] = nn.Linear(in_features=4096, out_features=self.class_num, bias=True)
        elif model_name == 'VGG13':
            model = torchvision.models.vgg13(pretrained=self.ifpretrained)
            if channel_num == 1:
                model.features[0] = nn.Conv2d(1, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            model.classifier[6] = nn.Linear(in_features=4096, out_features=self.class_num, bias=True)
        elif model_name == 'VGG16':
            model = torchvision.models.vgg16(pretrained=self.ifpretrained)
            if channel_num == 1:
                model.features[0] = nn.Conv2d(1, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            model.classifier[6] = nn.Linear(in_features=4096, out_features=self.class_num, bias=True)
        elif model_name == 'VGG19':
            model = torchvision.models.vgg19(pretrained=self.ifpretrained)
            if channel_num == 1:
                model.features[0] = nn.Conv2d(1, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            model.classifier[6] = nn.Linear(in_features=4096, out_features=self.class_num, bias=True)
        elif model_name == 'densenet121':
            model = torchvision.models.densenet121(pretrained=self.ifpretrained)
            if channel_num == 1:
                model.features.conv0= nn.Conv2d(1, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
            model.classifier = nn.Linear(in_features=1024, out_features=self.class_num, bias=True)
        elif model_name == 'densenet161':
            model = torchvision.models.densenet161(pretrained=self.ifpretrained)
            if channel_num == 1:
                model.features.conv0= nn.Conv2d(1, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
            model.classifier = nn.Linear(in_features=2208, out_features=self.class_num, bias=True)
        elif model_name == 'densenet169':
            model = torchvision.models.densenet169(pretrained=self.ifpretrained)
            if channel_num == 1:
                model.features.conv0= nn.Conv2d(1, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
            model.classifier = nn.Linear(in_features=1664, out_features=self.class_num, bias=True)
        elif model_name == 'densenet201':
            model = torchvision.models.densenet201(pretrained=self.ifpretrained)
            if channel_num == 1:
                model.features.conv0= nn.Conv2d(1, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
            model.classifier = nn.Linear(in_features=1920, out_features=self.class_num, bias=True)
        elif model_name == 'alexnet':
            model = torchvision.models.alexnet(pretrained=self.ifpretrained)
            if channel_num == 1:
                model.features[0] = nn.Conv2d(1, 64, kernel_size=(11, 11), stride=(4, 4), padding=(2, 2))
            model.classifier[6] = nn.Linear(in_features=4096, out_features=self.class_num, bias=True)
        elif model_name == 'inception_v3':
            model = torchvision.models.inception_v3(pretrained=self.ifpretrained)
            if channel_num == 1:
                model.Conv2d_1a_3x3.conv = nn.Conv2d(1, 32, kernel_size=(3, 3), stride=(2, 2), bias=False)
            model.fc = nn.Linear(in_features=2048, out_features=self.class_num, bias=True)
        elif model_name == 'shufflenet_v2_x0_5':
            model = torchvision.models.shufflenet_v2_x0_5(pretrained=self.ifpretrained)
            if channel_num == 1:
                model.Conv2d_1a_3x3.conv = nn.Conv2d(1, 24, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
            model.fc = nn.Linear(in_features=1024, out_features=self.class_num, bias=True)
        elif model_name == 'shufflenet_v2_x1_0':
            model = torchvision.models.shufflenet_v2_x1_0(pretrained=self.ifpretrained)
            if channel_num == 1:
                model.Conv2d_1a_3x3.conv = nn.Conv2d(1, 24, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
            model.fc = nn.Linear(in_features=1024, out_features=self.class_num, bias=True)
        elif model_name == 'shufflenet_v2_x1_5':
            model = torchvision.models.shufflenet_v2_x1_5(pretrained=self.ifpretrained)
            if channel_num == 1:
                model.Conv2d_1a_3x3.conv = nn.Conv2d(1, 24, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
            model.fc = nn.Linear(in_features=1024, out_features=self.class_num, bias=True)
        elif model_name == 'shufflenet_v2_x2_0':
            model = torchvision.models.shufflenet_v2_x2_0(pretrained=self.ifpretrained)
            if channel_num == 1:
                model.Conv2d_1a_3x3.conv = nn.Conv2d(1, 24, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
            model.fc = nn.Linear(in_features=2048, out_features=self.class_num, bias=True)
        elif model_name == 'mobilenet_v2':
            model = torchvision.models.mobilenet_v2(pretrained=self.ifpretrained)
            if channel_num == 1:
                model.features[0][0] = nn.Conv2d(1, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
            model.classifier[1] = nn.Linear(in_features=1280, out_features=self.class_num, bias=True)
        elif model_name == 'squeezenet1_0':
            model = torchvision.models.squeezenet1_0(pretrained=self.ifpretrained)
            if channel_num == 1:
                model.features[0] = nn.Conv2d(1, 96, kernel_size=(7, 7), stride=(2, 2))
            model.classifier[1] = nn.Conv2d(512, self.class_num, kernel_size=(1, 1), stride=(1, 1))
        elif model_name == 'squeezenet1_1':
            model = torchvision.models.squeezenet1_1(pretrained=self.ifpretrained)
            if channel_num == 1:
                model.features[0] = nn.Conv2d(1, 64, kernel_size=(3, 3), stride=(2, 2))
            model.classifier[1] = nn.Conv2d(512, self.class_num, kernel_size=(1, 1), stride=(1, 1))
        elif model_name == 'mnasnet0_5':
            model = torchvision.models.mnasnet0_5(pretrained=self.ifpretrained)
            if channel_num == 1:
                model.layers[0] = nn.Conv2d(1, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
            model.classifier[1] = nn.Linear(in_features=1280, out_features=self.class_num, bias=True)
        elif model_name == 'mnasnet0_75':
            model = torchvision.models.mnasnet0_75(pretrained=self.ifpretrained)
            if channel_num == 1:
                model.layers[0] = nn.Conv2d(1, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
            model.classifier[1] = nn.Linear(in_features=1280, out_features=self.class_num, bias=True)
        elif model_name == 'mnasnet1_0':
            model = torchvision.models.mnasnet1_0(pretrained=self.ifpretrained)
            if channel_num == 1:
                model.layers[0] = nn.Conv2d(1, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
            model.classifier[1] = nn.Linear(in_features=1280, out_features=self.class_num, bias=True)

        if use_gpu:
            model = model.cuda()

        # define loss function
        criterion = nn.CrossEntropyLoss()

        # Observe that all parameters are being optimized
        if self.optim=='SGD':
            optimizer = optim.SGD(model.parameters(), lr=self.sgd_lr, momentum=self.sgd_momentum, dampening=self.sgd_dampening)
        elif self.optim=='Adam':
            optimizer = optim.Adam(model.parameters(), lr=self.adam_lr, betas=(self.adam_betas0, self.adam_betas1), eps=self.adam_eps)
        elif self.optim=='RMSprop':
            optimizer = optim.RMSprop(model.parameters(),lr=self.rmsprop_lr, alpha=self.rmsprop_alpha,momentum=self.rmsprop_momentum, eps=self.rmsprop_eps )

        scheduler = lr_scheduler.StepLR(optimizer, step_size=self.step_size, gamma=self.gamma)
        since = time.time()

        best_model_wts = model.state_dict()
        best_acc = 0.0

        for epoch in trange(self.epochs):
            print('Epoch {}/{}'.format(epoch + 1, self.epochs))
            print('-' * 10)

            # Each epoch has a training and validation phase
            for phase in ['train', 'val']:
                if phase == 'train':
                    scheduler.step()
                    model.train(True)  # Set model to training mode
                else:
                    model.train(False)  # Set model to evaluate mode
                    model.eval()

                running_loss = 0.0
                running_corrects = 0.0

                # Iterate over data.
                for data in dataloders[phase]:
                    # get the inputs
                    inputs, labels = data
                    # wrap them in Variable
                    if use_gpu:
                        inputs = Variable(inputs.to(torch.float32).cuda())
                        labels = Variable(labels.cuda())
                    else:
                        inputs, labels = Variable(inputs.to(torch.float32)), Variable(labels)

                    # zero the parameter gradients
                    optimizer.zero_grad()

                    # forward
                    outputs = model(inputs)
                    # print (outputs.shape)
                    _, preds = torch.max(outputs.data, 1)
                    # print (outputs.shape)
                    # print (preds.shape)
                    # print(preds, labels)
                    loss = criterion(outputs, labels)

                    # backward + optimize only if in training phase
                    if phase == 'train':
                        loss.backward()
                        optimizer.step()

                    # statistics
                    running_loss += loss.item()
                    running_corrects += torch.sum(preds == labels.data).to(torch.float32)

                epoch_loss = running_loss / dataset_sizes[phase]
                epoch_acc = running_corrects / dataset_sizes[phase]
                # save model
                # if phase == 'train':
                #     if not os.path.exists('output'):
                #         os.makedirs('output')
                #     torch.save(model, 'output/resnet_epoch{}.pkl'.format(epoch))
                print('{} Loss: {:.4f} Acc: {:.4f}'.format(
                    phase, epoch_loss, epoch_acc))

                # deep copy the model
                if phase == 'val' and epoch_acc > best_acc:
                    best_acc = epoch_acc
                    best_model_wts = model.state_dict()

        time_elapsed = time.time() - since
        print('Training complete in {:.0f}m {:.0f}s'.format(
            time_elapsed // 60, time_elapsed % 60))
        print('Best test Acc: {:4f}'.format(best_acc))

        # load best model weights
        model.load_state_dict(best_model_wts)
        torch.save(model,'pths/{}_{}_{}.pth'.format(self.CNN_train_dataset,optorsar,self.CNN_classifier) )
        out=[]
        out.extend(['\n','Train Time：','Train Time {:.0f}m {:.0f}s'.format(time_elapsed // 60, time_elapsed % 60)])

        out.extend(['\n','Best Accuracy: {:4f}'.format(best_acc)])
        out=''.join(out)
        return model,out

    def test(self, model, dataloders, dataset_sizes):
        model.eval()
        running_corrects = 0.0

        # Iterate over data.
        preds_all = np.zeros(dataset_sizes)
        labels_all = np.zeros(dataset_sizes)
        i = 0
        for data in tqdm(dataloders):
            # get the inputs
            inputs, labels = data
            # wrap them in Variable
            inputs = Variable(inputs.to(torch.float32).to(device))
            labels = Variable(labels.to(device))
            # zero the parameter gradients
            outputs = model(inputs)
            _, preds = torch.max(outputs.data, 1)
            running_corrects += torch.sum(preds == labels.data).to(torch.float32)
            preds_all[i * preds.shape[0]:(i + 1) * preds.shape[0]] = preds.cpu().detach().numpy()
            labels_all[i * preds.shape[0]: (i + 1) * preds.shape[0]] = labels.cpu().detach().numpy()
            i += 1
        correct = running_corrects / dataset_sizes
        test_cm = confusion_matrix(labels_all, preds_all)
        print(test_cm,'test_cm\n')
        print(running_corrects,dataset_sizes,'running_corrects,dataset_sizes')


        return test_cm, correct

    # return ({0: test_cleandata_cm, 1: sub_dir, 2: data_name, 3: self.CNN_classifier, 4: correct})
    def load_so2sat(self, model='vgg16', batch_size=16):
        x_train_opt = np.load('Data\\so2sat\\20000rgb5.npy')
        x_train_sar = np.load('Data\\so2sat\\20000vvfilter5.npy')
        y_train = np.load('Data\\so2sat\\20000lab0-5.npy')


        x_val_opt = np.load('Data\\so2sat\\10608rgb5.npy')
        x_val_sar = np.load('Data\\so2sat\\10608vvfilter5.npy')
        y_val = np.load('Data\\so2sat\\10607testlab0-5.npy')

        x_train_opt = np.transpose(x_train_opt, (0, 3, 1, 2))
        x_val_opt = np.transpose(x_val_opt, (0, 3, 1, 2))

        x_train_sar = x_train_sar[:, :, :, np.newaxis]
        x_val_sar = x_val_sar[:, :, :, np.newaxis]
        x_train_sar = np.transpose(x_train_sar, (0, 3, 1, 2))
        x_val_sar = np.transpose(x_val_sar, (0, 3, 1, 2))

        a = torch.from_numpy(x_train_opt)
        b = torch.from_numpy(y_train)
        c = torch.from_numpy(x_val_opt)
        d = torch.from_numpy(y_val)
        train_opt_ids = TensorDataset(a, b)
        train_loader_opt = DataLoader(dataset=train_opt_ids, batch_size=1024, shuffle=True)
        val_opt_ids = TensorDataset(c, d)
        val_loader_opt = DataLoader(dataset=val_opt_ids, batch_size=1024, shuffle=False)
        dataloaders_opt = {'train':train_loader_opt,'val':val_loader_opt}

        m = torch.from_numpy(x_train_sar)
        n = torch.from_numpy(x_val_sar)
        train_sar_ids = TensorDataset(m, b)
        train_loader_sar = DataLoader(dataset=train_sar_ids, batch_size=1024, shuffle=True)
        val_sar_ids = TensorDataset(n, d)
        val_loader_sar = DataLoader(dataset=val_sar_ids, batch_size=1024, shuffle=False)
        dataloaders_sar = {'train':train_loader_sar,'val':val_loader_sar}

        dataset_sizes = {'train':len(train_sar_ids), 'val':len(val_sar_ids)}
        return dataloaders_opt,dataloaders_sar, dataset_sizes


def write_excel_xlsx(path, value):
    index = len(value)
    # 打开excel
    xl = load_workbook(path)
    # 获取所有sheet页名字
    xl_sheet_names = xl.get_sheet_names()
    # 定位到相应sheet页,[0]为sheet页索引
    xl_sheet = xl.get_sheet_by_name(xl_sheet_names[0])
    # 获取行列数
    row = xl_sheet.max_row
    if row == 0:
        ge = -2
    else:
        ge = 2
    # sheet.title = sheet_name
    for i in range(0, index):
        xl_sheet.cell(row=i + ge +row, column=1, value=str(value[i]))
    xl.save(path)
    print("Write in xlsx file！")


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    train = QtWidgets.QDialog()
    ui = Ui_Form_CNN_train_multisource()
    ui.setupUi(train)
    ui.caolianjie()
    train.show()
    sys.exit(app.exec_())